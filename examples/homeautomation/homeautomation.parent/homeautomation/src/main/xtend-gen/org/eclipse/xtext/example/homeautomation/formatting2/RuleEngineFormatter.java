/**
 * generated by Xtext 2.27.0
 */
package org.eclipse.xtext.example.homeautomation.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeConstraint;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.example.homeautomation.ruleEngine.Declaration;
import org.eclipse.xtext.example.homeautomation.ruleEngine.Device;
import org.eclipse.xtext.example.homeautomation.ruleEngine.Model;
import org.eclipse.xtext.example.homeautomation.ruleEngine.State;
import org.eclipse.xtext.example.homeautomation.services.RuleEngineGrammarAccess;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XCollectionLiteral;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.formatting2.XbaseFormatter;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;

@SuppressWarnings("all")
public class RuleEngineFormatter extends XbaseFormatter {
  @Inject
  @Extension
  private RuleEngineGrammarAccess _ruleEngineGrammarAccess;

  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Declaration> _declarations = model.getDeclarations();
    for (final Declaration declaration : _declarations) {
      document.<Declaration>format(declaration);
    }
  }

  protected void _format(final Device device, @Extension final IFormattableDocument document) {
    EList<State> _states = device.getStates();
    for (final State state : _states) {
      document.<State>format(state);
    }
  }

  public void format(final Object device, final IFormattableDocument document) {
    if (device instanceof JvmTypeParameter) {
      _format((JvmTypeParameter)device, document);
      return;
    } else if (device instanceof JvmFormalParameter) {
      _format((JvmFormalParameter)device, document);
      return;
    } else if (device instanceof XtextResource) {
      _format((XtextResource)device, document);
      return;
    } else if (device instanceof XAssignment) {
      _format((XAssignment)device, document);
      return;
    } else if (device instanceof XBinaryOperation) {
      _format((XBinaryOperation)device, document);
      return;
    } else if (device instanceof XDoWhileExpression) {
      _format((XDoWhileExpression)device, document);
      return;
    } else if (device instanceof XFeatureCall) {
      _format((XFeatureCall)device, document);
      return;
    } else if (device instanceof XMemberFeatureCall) {
      _format((XMemberFeatureCall)device, document);
      return;
    } else if (device instanceof XPostfixOperation) {
      _format((XPostfixOperation)device, document);
      return;
    } else if (device instanceof XWhileExpression) {
      _format((XWhileExpression)device, document);
      return;
    } else if (device instanceof XFunctionTypeRef) {
      _format((XFunctionTypeRef)device, document);
      return;
    } else if (device instanceof JvmGenericArrayTypeReference) {
      _format((JvmGenericArrayTypeReference)device, document);
      return;
    } else if (device instanceof JvmParameterizedTypeReference) {
      _format((JvmParameterizedTypeReference)device, document);
      return;
    } else if (device instanceof JvmWildcardTypeReference) {
      _format((JvmWildcardTypeReference)device, document);
      return;
    } else if (device instanceof Device) {
      _format((Device)device, document);
      return;
    } else if (device instanceof XBasicForLoopExpression) {
      _format((XBasicForLoopExpression)device, document);
      return;
    } else if (device instanceof XBlockExpression) {
      _format((XBlockExpression)device, document);
      return;
    } else if (device instanceof XCastedExpression) {
      _format((XCastedExpression)device, document);
      return;
    } else if (device instanceof XClosure) {
      _format((XClosure)device, document);
      return;
    } else if (device instanceof XCollectionLiteral) {
      _format((XCollectionLiteral)device, document);
      return;
    } else if (device instanceof XConstructorCall) {
      _format((XConstructorCall)device, document);
      return;
    } else if (device instanceof XForLoopExpression) {
      _format((XForLoopExpression)device, document);
      return;
    } else if (device instanceof XIfExpression) {
      _format((XIfExpression)device, document);
      return;
    } else if (device instanceof XInstanceOfExpression) {
      _format((XInstanceOfExpression)device, document);
      return;
    } else if (device instanceof XReturnExpression) {
      _format((XReturnExpression)device, document);
      return;
    } else if (device instanceof XSwitchExpression) {
      _format((XSwitchExpression)device, document);
      return;
    } else if (device instanceof XSynchronizedExpression) {
      _format((XSynchronizedExpression)device, document);
      return;
    } else if (device instanceof XThrowExpression) {
      _format((XThrowExpression)device, document);
      return;
    } else if (device instanceof XTryCatchFinallyExpression) {
      _format((XTryCatchFinallyExpression)device, document);
      return;
    } else if (device instanceof XTypeLiteral) {
      _format((XTypeLiteral)device, document);
      return;
    } else if (device instanceof XVariableDeclaration) {
      _format((XVariableDeclaration)device, document);
      return;
    } else if (device instanceof JvmTypeConstraint) {
      _format((JvmTypeConstraint)device, document);
      return;
    } else if (device instanceof Model) {
      _format((Model)device, document);
      return;
    } else if (device instanceof XExpression) {
      _format((XExpression)device, document);
      return;
    } else if (device instanceof XImportDeclaration) {
      _format((XImportDeclaration)device, document);
      return;
    } else if (device instanceof XImportSection) {
      _format((XImportSection)device, document);
      return;
    } else if (device instanceof EObject) {
      _format((EObject)device, document);
      return;
    } else if (device == null) {
      _format((Void)null, document);
      return;
    } else if (device != null) {
      _format(device, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(device, document).toString());
    }
  }
}
