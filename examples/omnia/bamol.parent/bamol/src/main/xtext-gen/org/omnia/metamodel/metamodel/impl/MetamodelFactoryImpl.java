/**
 * generated by Xtext 2.27.0
 */
package org.omnia.metamodel.metamodel.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.omnia.metamodel.metamodel.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MetamodelFactoryImpl extends EFactoryImpl implements MetamodelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MetamodelFactory init()
  {
    try
    {
      MetamodelFactory theMetamodelFactory = (MetamodelFactory)EPackage.Registry.INSTANCE.getEFactory(MetamodelPackage.eNS_URI);
      if (theMetamodelFactory != null)
      {
        return theMetamodelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MetamodelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MetamodelPackage.APP: return createApp();
      case MetamodelPackage.ENTITY: return createEntity();
      case MetamodelPackage.MTYPE: return createMType();
      case MetamodelPackage.AGENT: return createAgent();
      case MetamodelPackage.APPLICATION_BEHAVIOUR: return createApplicationBehaviour();
      case MetamodelPackage.COMMITEMENT: return createCommitement();
      case MetamodelPackage.DASHBOARD: return createDashboard();
      case MetamodelPackage.DATA_SOURCE: return createDataSource();
      case MetamodelPackage.DOCUMENT: return createDocument();
      case MetamodelPackage.ENUMERATION: return createEnumeration();
      case MetamodelPackage.FORM: return createForm();
      case MetamodelPackage.GENERIC_ENTITY: return createGenericEntity();
      case MetamodelPackage.LIST: return createList();
      case MetamodelPackage.QUERY: return createQuery();
      case MetamodelPackage.RESOURCE: return createResource();
      case MetamodelPackage.SELECTOR: return createSelector();
      case MetamodelPackage.SERIE: return createSerie();
      case MetamodelPackage.STATE_MACHINE: return createStateMachine();
      case MetamodelPackage.EVENT: return createEvent();
      case MetamodelPackage.APPLICATION_MENU: return createApplicationMenu();
      case MetamodelPackage.LANGUAGE: return createLanguage();
      case MetamodelPackage.WEB_COMPONENT: return createWebComponent();
      case MetamodelPackage.TEXT_TEMPLATE: return createTextTemplate();
      case MetamodelPackage.THEME: return createTheme();
      case MetamodelPackage.AUTHORIZATION_POLICY: return createAuthorizationPolicy();
      case MetamodelPackage.AUTHORIZATION_ROLE: return createAuthorizationRole();
      case MetamodelPackage.MATTRIBUTE: return createMAttribute();
      case MetamodelPackage.ENTITY_BEHAVIOUR: return createEntityBehaviour();
      case MetamodelPackage.DATA_BEHAVIOUR: return createDataBehaviour();
      case MetamodelPackage.BEHAVIOUR_NAMESPACE: return createBehaviourNamespace();
      case MetamodelPackage.MMULTIPLICITY: return createMMultiplicity();
      case MetamodelPackage.MENUMERATION: return createMEnumeration();
      case MetamodelPackage.MBOOLEAN: return createMBoolean();
      case MetamodelPackage.MDATE: return createMDate();
      case MetamodelPackage.MDECIMAL: return createMDecimal();
      case MetamodelPackage.MINTEGER: return createMInteger();
      case MetamodelPackage.MTEXT: return createMText();
      case MetamodelPackage.MUUID: return createMUuid();
      case MetamodelPackage.ELEMENT_ATTRIBUTE: return createElementAttribute();
      case MetamodelPackage.ELEMENT_BEHAVIOUR: return createElementBehaviour();
      case MetamodelPackage.INNER_ELEMENT: return createInnerElement();
      case MetamodelPackage.BEHAVIOUR_DEPENDENCY: return createBehaviourDependency();
      case MetamodelPackage.ENUMERATION_VALUE: return createEnumerationValue();
      case MetamodelPackage.QUERY_TABLE: return createQueryTable();
      case MetamodelPackage.QUERY_JOIN: return createQueryJoin();
      case MetamodelPackage.QUERY_PROPERTY: return createQueryProperty();
      case MetamodelPackage.QUERY_ORDERED_PROPERTY: return createQueryOrderedProperty();
      case MetamodelPackage.QUERY_FILTER: return createQueryFilter();
      case MetamodelPackage.QUERY_JOIN_PREDICATE: return createQueryJoinPredicate();
      case MetamodelPackage.STATE: return createState();
      case MetamodelPackage.STATE_TRANSITION: return createStateTransition();
      case MetamodelPackage.STATE_DECISION: return createStateDecision();
      case MetamodelPackage.STATE_ENABLED_OPERATION: return createStateEnabledOperation();
      case MetamodelPackage.STATE_ENABLED_ATTRIBUTE: return createStateEnabledAttribute();
      case MetamodelPackage.STATE_BEHAVIOUR: return createStateBehaviour();
      case MetamodelPackage.LANGUAGE_TEXT: return createLanguageText();
      case MetamodelPackage.AUTHORIZATION_POLICY_PERMISSION: return createAuthorizationPolicyPermission();
      case MetamodelPackage.AUTHORIZATION_ROLE_SUBJECT: return createAuthorizationRoleSubject();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MetamodelPackage.MAGGREGATION_KIND:
        return createMAggregationKindFromString(eDataType, initialValue);
      case MetamodelPackage.ENTITY_BEHAVIOUR_TYPE:
        return createEntityBehaviourTypeFromString(eDataType, initialValue);
      case MetamodelPackage.DATA_BEHAVIOUR_TYPE:
        return createDataBehaviourTypeFromString(eDataType, initialValue);
      case MetamodelPackage.EXECUTION_LOCATION:
        return createExecutionLocationFromString(eDataType, initialValue);
      case MetamodelPackage.ELEMENT_TYPE:
        return createElementTypeFromString(eDataType, initialValue);
      case MetamodelPackage.ELEMENT_BEHAVIOUR_TYPE:
        return createElementBehaviourTypeFromString(eDataType, initialValue);
      case MetamodelPackage.SCREEN_SIZE:
        return createScreenSizeFromString(eDataType, initialValue);
      case MetamodelPackage.RUNTIME_LOCATION:
        return createRuntimeLocationFromString(eDataType, initialValue);
      case MetamodelPackage.BEHAVIOUR_DEPENDENCY_TYPE:
        return createBehaviourDependencyTypeFromString(eDataType, initialValue);
      case MetamodelPackage.QUERY_FUNCTION:
        return createQueryFunctionFromString(eDataType, initialValue);
      case MetamodelPackage.QUERY_SORT:
        return createQuerySortFromString(eDataType, initialValue);
      case MetamodelPackage.QUERY_JOIN_TYPE:
        return createQueryJoinTypeFromString(eDataType, initialValue);
      case MetamodelPackage.STATE_TRANSITION_TYPE:
        return createStateTransitionTypeFromString(eDataType, initialValue);
      case MetamodelPackage.STATE_DECISION_COMMENT_TYPE:
        return createStateDecisionCommentTypeFromString(eDataType, initialValue);
      case MetamodelPackage.STATE_ENABLED_OPERATION_TYPE_ENUM:
        return createStateEnabledOperationTypeEnumFromString(eDataType, initialValue);
      case MetamodelPackage.STATE_BEHAVIOUR_TYPE_ENUM:
        return createStateBehaviourTypeEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MetamodelPackage.MAGGREGATION_KIND:
        return convertMAggregationKindToString(eDataType, instanceValue);
      case MetamodelPackage.ENTITY_BEHAVIOUR_TYPE:
        return convertEntityBehaviourTypeToString(eDataType, instanceValue);
      case MetamodelPackage.DATA_BEHAVIOUR_TYPE:
        return convertDataBehaviourTypeToString(eDataType, instanceValue);
      case MetamodelPackage.EXECUTION_LOCATION:
        return convertExecutionLocationToString(eDataType, instanceValue);
      case MetamodelPackage.ELEMENT_TYPE:
        return convertElementTypeToString(eDataType, instanceValue);
      case MetamodelPackage.ELEMENT_BEHAVIOUR_TYPE:
        return convertElementBehaviourTypeToString(eDataType, instanceValue);
      case MetamodelPackage.SCREEN_SIZE:
        return convertScreenSizeToString(eDataType, instanceValue);
      case MetamodelPackage.RUNTIME_LOCATION:
        return convertRuntimeLocationToString(eDataType, instanceValue);
      case MetamodelPackage.BEHAVIOUR_DEPENDENCY_TYPE:
        return convertBehaviourDependencyTypeToString(eDataType, instanceValue);
      case MetamodelPackage.QUERY_FUNCTION:
        return convertQueryFunctionToString(eDataType, instanceValue);
      case MetamodelPackage.QUERY_SORT:
        return convertQuerySortToString(eDataType, instanceValue);
      case MetamodelPackage.QUERY_JOIN_TYPE:
        return convertQueryJoinTypeToString(eDataType, instanceValue);
      case MetamodelPackage.STATE_TRANSITION_TYPE:
        return convertStateTransitionTypeToString(eDataType, instanceValue);
      case MetamodelPackage.STATE_DECISION_COMMENT_TYPE:
        return convertStateDecisionCommentTypeToString(eDataType, instanceValue);
      case MetamodelPackage.STATE_ENABLED_OPERATION_TYPE_ENUM:
        return convertStateEnabledOperationTypeEnumToString(eDataType, instanceValue);
      case MetamodelPackage.STATE_BEHAVIOUR_TYPE_ENUM:
        return convertStateBehaviourTypeEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public App createApp()
  {
    AppImpl app = new AppImpl();
    return app;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MType createMType()
  {
    MTypeImpl mType = new MTypeImpl();
    return mType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Agent createAgent()
  {
    AgentImpl agent = new AgentImpl();
    return agent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplicationBehaviour createApplicationBehaviour()
  {
    ApplicationBehaviourImpl applicationBehaviour = new ApplicationBehaviourImpl();
    return applicationBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Commitement createCommitement()
  {
    CommitementImpl commitement = new CommitementImpl();
    return commitement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Dashboard createDashboard()
  {
    DashboardImpl dashboard = new DashboardImpl();
    return dashboard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataSource createDataSource()
  {
    DataSourceImpl dataSource = new DataSourceImpl();
    return dataSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Document createDocument()
  {
    DocumentImpl document = new DocumentImpl();
    return document;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Enumeration createEnumeration()
  {
    EnumerationImpl enumeration = new EnumerationImpl();
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Form createForm()
  {
    FormImpl form = new FormImpl();
    return form;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenericEntity createGenericEntity()
  {
    GenericEntityImpl genericEntity = new GenericEntityImpl();
    return genericEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Query createQuery()
  {
    QueryImpl query = new QueryImpl();
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Resource createResource()
  {
    ResourceImpl resource = new ResourceImpl();
    return resource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Serie createSerie()
  {
    SerieImpl serie = new SerieImpl();
    return serie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachine createStateMachine()
  {
    StateMachineImpl stateMachine = new StateMachineImpl();
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplicationMenu createApplicationMenu()
  {
    ApplicationMenuImpl applicationMenu = new ApplicationMenuImpl();
    return applicationMenu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Language createLanguage()
  {
    LanguageImpl language = new LanguageImpl();
    return language;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WebComponent createWebComponent()
  {
    WebComponentImpl webComponent = new WebComponentImpl();
    return webComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextTemplate createTextTemplate()
  {
    TextTemplateImpl textTemplate = new TextTemplateImpl();
    return textTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Theme createTheme()
  {
    ThemeImpl theme = new ThemeImpl();
    return theme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AuthorizationPolicy createAuthorizationPolicy()
  {
    AuthorizationPolicyImpl authorizationPolicy = new AuthorizationPolicyImpl();
    return authorizationPolicy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AuthorizationRole createAuthorizationRole()
  {
    AuthorizationRoleImpl authorizationRole = new AuthorizationRoleImpl();
    return authorizationRole;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MAttribute createMAttribute()
  {
    MAttributeImpl mAttribute = new MAttributeImpl();
    return mAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityBehaviour createEntityBehaviour()
  {
    EntityBehaviourImpl entityBehaviour = new EntityBehaviourImpl();
    return entityBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataBehaviour createDataBehaviour()
  {
    DataBehaviourImpl dataBehaviour = new DataBehaviourImpl();
    return dataBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviourNamespace createBehaviourNamespace()
  {
    BehaviourNamespaceImpl behaviourNamespace = new BehaviourNamespaceImpl();
    return behaviourNamespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MMultiplicity createMMultiplicity()
  {
    MMultiplicityImpl mMultiplicity = new MMultiplicityImpl();
    return mMultiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MEnumeration createMEnumeration()
  {
    MEnumerationImpl mEnumeration = new MEnumerationImpl();
    return mEnumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MBoolean createMBoolean()
  {
    MBooleanImpl mBoolean = new MBooleanImpl();
    return mBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MDate createMDate()
  {
    MDateImpl mDate = new MDateImpl();
    return mDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MDecimal createMDecimal()
  {
    MDecimalImpl mDecimal = new MDecimalImpl();
    return mDecimal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MInteger createMInteger()
  {
    MIntegerImpl mInteger = new MIntegerImpl();
    return mInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MText createMText()
  {
    MTextImpl mText = new MTextImpl();
    return mText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MUuid createMUuid()
  {
    MUuidImpl mUuid = new MUuidImpl();
    return mUuid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementAttribute createElementAttribute()
  {
    ElementAttributeImpl elementAttribute = new ElementAttributeImpl();
    return elementAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementBehaviour createElementBehaviour()
  {
    ElementBehaviourImpl elementBehaviour = new ElementBehaviourImpl();
    return elementBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InnerElement createInnerElement()
  {
    InnerElementImpl innerElement = new InnerElementImpl();
    return innerElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviourDependency createBehaviourDependency()
  {
    BehaviourDependencyImpl behaviourDependency = new BehaviourDependencyImpl();
    return behaviourDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationValue createEnumerationValue()
  {
    EnumerationValueImpl enumerationValue = new EnumerationValueImpl();
    return enumerationValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryTable createQueryTable()
  {
    QueryTableImpl queryTable = new QueryTableImpl();
    return queryTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryJoin createQueryJoin()
  {
    QueryJoinImpl queryJoin = new QueryJoinImpl();
    return queryJoin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryProperty createQueryProperty()
  {
    QueryPropertyImpl queryProperty = new QueryPropertyImpl();
    return queryProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryOrderedProperty createQueryOrderedProperty()
  {
    QueryOrderedPropertyImpl queryOrderedProperty = new QueryOrderedPropertyImpl();
    return queryOrderedProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryFilter createQueryFilter()
  {
    QueryFilterImpl queryFilter = new QueryFilterImpl();
    return queryFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryJoinPredicate createQueryJoinPredicate()
  {
    QueryJoinPredicateImpl queryJoinPredicate = new QueryJoinPredicateImpl();
    return queryJoinPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateTransition createStateTransition()
  {
    StateTransitionImpl stateTransition = new StateTransitionImpl();
    return stateTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateDecision createStateDecision()
  {
    StateDecisionImpl stateDecision = new StateDecisionImpl();
    return stateDecision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateEnabledOperation createStateEnabledOperation()
  {
    StateEnabledOperationImpl stateEnabledOperation = new StateEnabledOperationImpl();
    return stateEnabledOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateEnabledAttribute createStateEnabledAttribute()
  {
    StateEnabledAttributeImpl stateEnabledAttribute = new StateEnabledAttributeImpl();
    return stateEnabledAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateBehaviour createStateBehaviour()
  {
    StateBehaviourImpl stateBehaviour = new StateBehaviourImpl();
    return stateBehaviour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LanguageText createLanguageText()
  {
    LanguageTextImpl languageText = new LanguageTextImpl();
    return languageText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AuthorizationPolicyPermission createAuthorizationPolicyPermission()
  {
    AuthorizationPolicyPermissionImpl authorizationPolicyPermission = new AuthorizationPolicyPermissionImpl();
    return authorizationPolicyPermission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AuthorizationRoleSubject createAuthorizationRoleSubject()
  {
    AuthorizationRoleSubjectImpl authorizationRoleSubject = new AuthorizationRoleSubjectImpl();
    return authorizationRoleSubject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MAggregationKind createMAggregationKindFromString(EDataType eDataType, String initialValue)
  {
    MAggregationKind result = MAggregationKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMAggregationKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EntityBehaviourType createEntityBehaviourTypeFromString(EDataType eDataType, String initialValue)
  {
    EntityBehaviourType result = EntityBehaviourType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEntityBehaviourTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataBehaviourType createDataBehaviourTypeFromString(EDataType eDataType, String initialValue)
  {
    DataBehaviourType result = DataBehaviourType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataBehaviourTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExecutionLocation createExecutionLocationFromString(EDataType eDataType, String initialValue)
  {
    ExecutionLocation result = ExecutionLocation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExecutionLocationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementType createElementTypeFromString(EDataType eDataType, String initialValue)
  {
    ElementType result = ElementType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertElementTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementBehaviourType createElementBehaviourTypeFromString(EDataType eDataType, String initialValue)
  {
    ElementBehaviourType result = ElementBehaviourType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertElementBehaviourTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScreenSize createScreenSizeFromString(EDataType eDataType, String initialValue)
  {
    ScreenSize result = ScreenSize.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertScreenSizeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RuntimeLocation createRuntimeLocationFromString(EDataType eDataType, String initialValue)
  {
    RuntimeLocation result = RuntimeLocation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRuntimeLocationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BehaviourDependencyType createBehaviourDependencyTypeFromString(EDataType eDataType, String initialValue)
  {
    BehaviourDependencyType result = BehaviourDependencyType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBehaviourDependencyTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryFunction createQueryFunctionFromString(EDataType eDataType, String initialValue)
  {
    QueryFunction result = QueryFunction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertQueryFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuerySort createQuerySortFromString(EDataType eDataType, String initialValue)
  {
    QuerySort result = QuerySort.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertQuerySortToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryJoinType createQueryJoinTypeFromString(EDataType eDataType, String initialValue)
  {
    QueryJoinType result = QueryJoinType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertQueryJoinTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateTransitionType createStateTransitionTypeFromString(EDataType eDataType, String initialValue)
  {
    StateTransitionType result = StateTransitionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateTransitionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateDecisionCommentType createStateDecisionCommentTypeFromString(EDataType eDataType, String initialValue)
  {
    StateDecisionCommentType result = StateDecisionCommentType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateDecisionCommentTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateEnabledOperationTypeEnum createStateEnabledOperationTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    StateEnabledOperationTypeEnum result = StateEnabledOperationTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateEnabledOperationTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateBehaviourTypeEnum createStateBehaviourTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    StateBehaviourTypeEnum result = StateBehaviourTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStateBehaviourTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetamodelPackage getMetamodelPackage()
  {
    return (MetamodelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MetamodelPackage getPackage()
  {
    return MetamodelPackage.eINSTANCE;
  }

} //MetamodelFactoryImpl
