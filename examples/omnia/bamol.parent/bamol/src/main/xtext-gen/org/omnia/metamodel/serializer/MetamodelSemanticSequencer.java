/*
 * generated by Xtext 2.27.0
 */
package org.omnia.metamodel.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omnia.metamodel.metamodel.Agent;
import org.omnia.metamodel.metamodel.App;
import org.omnia.metamodel.metamodel.ApplicationBehaviour;
import org.omnia.metamodel.metamodel.ApplicationMenu;
import org.omnia.metamodel.metamodel.AuthorizationPolicy;
import org.omnia.metamodel.metamodel.AuthorizationPolicyPermission;
import org.omnia.metamodel.metamodel.AuthorizationRole;
import org.omnia.metamodel.metamodel.AuthorizationRoleSubject;
import org.omnia.metamodel.metamodel.BehaviourDependency;
import org.omnia.metamodel.metamodel.BehaviourNamespace;
import org.omnia.metamodel.metamodel.Commitement;
import org.omnia.metamodel.metamodel.Dashboard;
import org.omnia.metamodel.metamodel.DataBehaviour;
import org.omnia.metamodel.metamodel.DataSource;
import org.omnia.metamodel.metamodel.Document;
import org.omnia.metamodel.metamodel.ElementAttribute;
import org.omnia.metamodel.metamodel.ElementBehaviour;
import org.omnia.metamodel.metamodel.EntityBehaviour;
import org.omnia.metamodel.metamodel.Enumeration;
import org.omnia.metamodel.metamodel.EnumerationValue;
import org.omnia.metamodel.metamodel.Event;
import org.omnia.metamodel.metamodel.Form;
import org.omnia.metamodel.metamodel.GenericEntity;
import org.omnia.metamodel.metamodel.InnerElement;
import org.omnia.metamodel.metamodel.Language;
import org.omnia.metamodel.metamodel.LanguageText;
import org.omnia.metamodel.metamodel.List;
import org.omnia.metamodel.metamodel.MAttribute;
import org.omnia.metamodel.metamodel.MBoolean;
import org.omnia.metamodel.metamodel.MDate;
import org.omnia.metamodel.metamodel.MDecimal;
import org.omnia.metamodel.metamodel.MEnumeration;
import org.omnia.metamodel.metamodel.MInteger;
import org.omnia.metamodel.metamodel.MMultiplicity;
import org.omnia.metamodel.metamodel.MText;
import org.omnia.metamodel.metamodel.MUuid;
import org.omnia.metamodel.metamodel.MetamodelPackage;
import org.omnia.metamodel.metamodel.Query;
import org.omnia.metamodel.metamodel.QueryFilter;
import org.omnia.metamodel.metamodel.QueryJoin;
import org.omnia.metamodel.metamodel.QueryJoinPredicate;
import org.omnia.metamodel.metamodel.QueryOrderedProperty;
import org.omnia.metamodel.metamodel.QueryProperty;
import org.omnia.metamodel.metamodel.QueryTable;
import org.omnia.metamodel.metamodel.Resource;
import org.omnia.metamodel.metamodel.Selector;
import org.omnia.metamodel.metamodel.Serie;
import org.omnia.metamodel.metamodel.State;
import org.omnia.metamodel.metamodel.StateBehaviour;
import org.omnia.metamodel.metamodel.StateDecision;
import org.omnia.metamodel.metamodel.StateEnabledAttribute;
import org.omnia.metamodel.metamodel.StateEnabledOperation;
import org.omnia.metamodel.metamodel.StateMachine;
import org.omnia.metamodel.metamodel.StateTransition;
import org.omnia.metamodel.metamodel.TextTemplate;
import org.omnia.metamodel.metamodel.Theme;
import org.omnia.metamodel.metamodel.WebComponent;
import org.omnia.metamodel.services.MetamodelGrammarAccess;

@SuppressWarnings("all")
public class MetamodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MetamodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MetamodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MetamodelPackage.AGENT:
				sequence_Agent(context, (Agent) semanticObject); 
				return; 
			case MetamodelPackage.APP:
				sequence_App(context, (App) semanticObject); 
				return; 
			case MetamodelPackage.APPLICATION_BEHAVIOUR:
				sequence_ApplicationBehaviour(context, (ApplicationBehaviour) semanticObject); 
				return; 
			case MetamodelPackage.APPLICATION_MENU:
				sequence_ApplicationMenu(context, (ApplicationMenu) semanticObject); 
				return; 
			case MetamodelPackage.AUTHORIZATION_POLICY:
				sequence_AuthorizationPolicy(context, (AuthorizationPolicy) semanticObject); 
				return; 
			case MetamodelPackage.AUTHORIZATION_POLICY_PERMISSION:
				sequence_AuthorizationPolicyPermission(context, (AuthorizationPolicyPermission) semanticObject); 
				return; 
			case MetamodelPackage.AUTHORIZATION_ROLE:
				sequence_AuthorizationRole(context, (AuthorizationRole) semanticObject); 
				return; 
			case MetamodelPackage.AUTHORIZATION_ROLE_SUBJECT:
				sequence_AuthorizationRoleSubject(context, (AuthorizationRoleSubject) semanticObject); 
				return; 
			case MetamodelPackage.BEHAVIOUR_DEPENDENCY:
				sequence_BehaviourDependency(context, (BehaviourDependency) semanticObject); 
				return; 
			case MetamodelPackage.BEHAVIOUR_NAMESPACE:
				sequence_BehaviourNamespace(context, (BehaviourNamespace) semanticObject); 
				return; 
			case MetamodelPackage.COMMITEMENT:
				sequence_Commitement(context, (Commitement) semanticObject); 
				return; 
			case MetamodelPackage.DASHBOARD:
				sequence_Dashboard(context, (Dashboard) semanticObject); 
				return; 
			case MetamodelPackage.DATA_BEHAVIOUR:
				sequence_DataBehaviour(context, (DataBehaviour) semanticObject); 
				return; 
			case MetamodelPackage.DATA_SOURCE:
				sequence_DataSource(context, (DataSource) semanticObject); 
				return; 
			case MetamodelPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case MetamodelPackage.ELEMENT_ATTRIBUTE:
				sequence_ElementAttribute(context, (ElementAttribute) semanticObject); 
				return; 
			case MetamodelPackage.ELEMENT_BEHAVIOUR:
				sequence_ElementBehaviour(context, (ElementBehaviour) semanticObject); 
				return; 
			case MetamodelPackage.ENTITY_BEHAVIOUR:
				sequence_EntityBehaviour(context, (EntityBehaviour) semanticObject); 
				return; 
			case MetamodelPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case MetamodelPackage.ENUMERATION_VALUE:
				sequence_EnumerationValue(context, (EnumerationValue) semanticObject); 
				return; 
			case MetamodelPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case MetamodelPackage.FORM:
				sequence_Form(context, (Form) semanticObject); 
				return; 
			case MetamodelPackage.GENERIC_ENTITY:
				sequence_GenericEntity(context, (GenericEntity) semanticObject); 
				return; 
			case MetamodelPackage.INNER_ELEMENT:
				sequence_InnerElement(context, (InnerElement) semanticObject); 
				return; 
			case MetamodelPackage.LANGUAGE:
				sequence_Language(context, (Language) semanticObject); 
				return; 
			case MetamodelPackage.LANGUAGE_TEXT:
				sequence_LanguageText(context, (LanguageText) semanticObject); 
				return; 
			case MetamodelPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case MetamodelPackage.MATTRIBUTE:
				sequence_MAttribute(context, (MAttribute) semanticObject); 
				return; 
			case MetamodelPackage.MBOOLEAN:
				sequence_MBoolean(context, (MBoolean) semanticObject); 
				return; 
			case MetamodelPackage.MDATE:
				sequence_MDate(context, (MDate) semanticObject); 
				return; 
			case MetamodelPackage.MDECIMAL:
				sequence_MDecimal(context, (MDecimal) semanticObject); 
				return; 
			case MetamodelPackage.MENUMERATION:
				sequence_MEnumeration(context, (MEnumeration) semanticObject); 
				return; 
			case MetamodelPackage.MINTEGER:
				sequence_MInteger(context, (MInteger) semanticObject); 
				return; 
			case MetamodelPackage.MMULTIPLICITY:
				sequence_MMultiplicity(context, (MMultiplicity) semanticObject); 
				return; 
			case MetamodelPackage.MTEXT:
				sequence_MText(context, (MText) semanticObject); 
				return; 
			case MetamodelPackage.MUUID:
				sequence_MUuid(context, (MUuid) semanticObject); 
				return; 
			case MetamodelPackage.QUERY:
				sequence_Query(context, (Query) semanticObject); 
				return; 
			case MetamodelPackage.QUERY_FILTER:
				sequence_QueryFilter(context, (QueryFilter) semanticObject); 
				return; 
			case MetamodelPackage.QUERY_JOIN:
				sequence_QueryJoin(context, (QueryJoin) semanticObject); 
				return; 
			case MetamodelPackage.QUERY_JOIN_PREDICATE:
				sequence_QueryJoinPredicate(context, (QueryJoinPredicate) semanticObject); 
				return; 
			case MetamodelPackage.QUERY_ORDERED_PROPERTY:
				sequence_QueryOrderedProperty(context, (QueryOrderedProperty) semanticObject); 
				return; 
			case MetamodelPackage.QUERY_PROPERTY:
				sequence_QueryProperty(context, (QueryProperty) semanticObject); 
				return; 
			case MetamodelPackage.QUERY_TABLE:
				sequence_QueryTable(context, (QueryTable) semanticObject); 
				return; 
			case MetamodelPackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case MetamodelPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case MetamodelPackage.SERIE:
				sequence_Serie(context, (Serie) semanticObject); 
				return; 
			case MetamodelPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case MetamodelPackage.STATE_BEHAVIOUR:
				sequence_StateBehaviour(context, (StateBehaviour) semanticObject); 
				return; 
			case MetamodelPackage.STATE_DECISION:
				sequence_StateDecision(context, (StateDecision) semanticObject); 
				return; 
			case MetamodelPackage.STATE_ENABLED_ATTRIBUTE:
				sequence_StateEnabledAttribute(context, (StateEnabledAttribute) semanticObject); 
				return; 
			case MetamodelPackage.STATE_ENABLED_OPERATION:
				sequence_StateEnabledOperation(context, (StateEnabledOperation) semanticObject); 
				return; 
			case MetamodelPackage.STATE_MACHINE:
				sequence_StateMachine(context, (StateMachine) semanticObject); 
				return; 
			case MetamodelPackage.STATE_TRANSITION:
				sequence_StateTransition(context, (StateTransition) semanticObject); 
				return; 
			case MetamodelPackage.TEXT_TEMPLATE:
				sequence_TextTemplate(context, (TextTemplate) semanticObject); 
				return; 
			case MetamodelPackage.THEME:
				sequence_Theme(context, (Theme) semanticObject); 
				return; 
			case MetamodelPackage.WEB_COMPONENT:
				sequence_WebComponent(context, (WebComponent) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Agent
	 *     MType returns Agent
	 *     Agent returns Agent
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Agent(ISerializationContext context, Agent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     App returns App
	 *
	 * Constraint:
	 *     (
	 *         (agents+=Agent agents+=Agent*)? 
	 *         (applicationBehaviours+=ApplicationBehaviour applicationBehaviours+=ApplicationBehaviour*)? 
	 *         (commitements+=Commitement commitements+=Commitement*)? 
	 *         (dashboards+=Dashboard dashboards+=Dashboard*)? 
	 *         (datasources+=DataSource datasources+=DataSource*)? 
	 *         (documents+=Document documents+=Document*)? 
	 *         (enumerations+=Enumeration enumerations+=Enumeration*)? 
	 *         (forms+=Form forms+=Form*)? 
	 *         (genericEntities+=GenericEntity genericEntities+=GenericEntity*)? 
	 *         (lists+=List lists+=List*)? 
	 *         (queries+=Query queries+=Query*)? 
	 *         (resources+=Resource resources+=Resource*)? 
	 *         (selectors+=Selector selectors+=Selector*)? 
	 *         (series+=Serie series+=Serie*)? 
	 *         (stateMachines+=StateMachine stateMachines+=StateMachine*)? 
	 *         (events+=Event events+=Event*)? 
	 *         (applicationMenus+=ApplicationMenu applicationMenus+=ApplicationMenu*)? 
	 *         (languages+=Language languages+=Language*)? 
	 *         (webComponents+=WebComponent webComponents+=WebComponent*)? 
	 *         (textTemplates+=TextTemplate textTemplates+=TextTemplate*)? 
	 *         (themes+=Theme themes+=Theme*)? 
	 *         (authorizationPolicies+=AuthorizationPolicy authorizationPolicies+=AuthorizationPolicy*)? 
	 *         (authorizationRoles+=AuthorizationRole authorizationRoles+=AuthorizationRole*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_App(ISerializationContext context, App semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ApplicationBehaviour returns ApplicationBehaviour
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         expression=EString? 
	 *         executionLocation=ExecutionLocation? 
	 *         dataSource=[DataSource|EString]? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ApplicationBehaviour(ISerializationContext context, ApplicationBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ApplicationMenu returns ApplicationMenu
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         label=EString? 
	 *         helpText=EString? 
	 *         type=ElementType? 
	 *         (attributes+=ElementAttribute attributes+=ElementAttribute*)? 
	 *         (behaviours+=ElementBehaviour behaviours+=ElementBehaviour*)? 
	 *         (elements+=InnerElement elements+=InnerElement*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ApplicationMenu(ISerializationContext context, ApplicationMenu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AuthorizationPolicyPermission returns AuthorizationPolicyPermission
	 *
	 * Constraint:
	 *     (name=EString description=EString? (roles+=[AuthorizationRole|EString] roles+=[AuthorizationRole|EString]*)?)
	 * </pre>
	 */
	protected void sequence_AuthorizationPolicyPermission(ISerializationContext context, AuthorizationPolicyPermission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AuthorizationPolicy returns AuthorizationPolicy
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         (permissions+=AuthorizationPolicyPermission permissions+=AuthorizationPolicyPermission*)? 
	 *         (policies+=AuthorizationPolicy policies+=AuthorizationPolicy*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_AuthorizationPolicy(ISerializationContext context, AuthorizationPolicy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AuthorizationRoleSubject returns AuthorizationRoleSubject
	 *
	 * Constraint:
	 *     (Id=EString? username=EString?)
	 * </pre>
	 */
	protected void sequence_AuthorizationRoleSubject(ISerializationContext context, AuthorizationRoleSubject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AuthorizationRole returns AuthorizationRole
	 *
	 * Constraint:
	 *     (name=EString description=EString? (subjects+=AuthorizationRoleSubject subjects+=AuthorizationRoleSubject*)?)
	 * </pre>
	 */
	protected void sequence_AuthorizationRole(ISerializationContext context, AuthorizationRole semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BehaviourDependency returns BehaviourDependency
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         type=BehaviourDependencyType? 
	 *         version=EInt? 
	 *         executionLocation=ExecutionLocation? 
	 *         path=EString? 
	 *         assemblyName=EString? 
	 *         expression=EString?
	 *     )
	 * </pre>
	 */
	protected void sequence_BehaviourDependency(ISerializationContext context, BehaviourDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BehaviourNamespace returns BehaviourNamespace
	 *
	 * Constraint:
	 *     (name=EString description=EString? fullyQualifiedName=EString? executionLocation=ExecutionLocation?)
	 * </pre>
	 */
	protected void sequence_BehaviourNamespace(ISerializationContext context, BehaviourNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Commitement
	 *     MType returns Commitement
	 *     Commitement returns Commitement
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Commitement(ISerializationContext context, Commitement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dashboard returns Dashboard
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         label=EString? 
	 *         helpText=EString? 
	 *         type=ElementType? 
	 *         (attributes+=ElementAttribute attributes+=ElementAttribute*)? 
	 *         (behaviours+=ElementBehaviour behaviours+=ElementBehaviour*)? 
	 *         elements=InnerElement?
	 *     )
	 * </pre>
	 */
	protected void sequence_Dashboard(ISerializationContext context, Dashboard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DataBehaviour returns DataBehaviour
	 *
	 * Constraint:
	 *     (name=EString description=EString? type=DataBehaviourType? expression=EString?)
	 * </pre>
	 */
	protected void sequence_DataBehaviour(ISerializationContext context, DataBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns DataSource
	 *     DataSource returns DataSource
	 *
	 * Constraint:
	 *     (
	 *         executesInConnector?='executesInConnector'? 
	 *         name=EString 
	 *         description=EString? 
	 *         behaviourRuntime=RuntimeLocation? 
	 *         dataAccessRuntime=RuntimeLocation? 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)? 
	 *         (behaviourDependencies+=BehaviourDependency behaviourDependencies+=BehaviourDependency*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_DataSource(ISerializationContext context, DataSource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Document
	 *     MType returns Document
	 *     Document returns Document
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementAttribute returns ElementAttribute
	 *
	 * Constraint:
	 *     (key=EString? value=EString?)
	 * </pre>
	 */
	protected void sequence_ElementAttribute(ISerializationContext context, ElementAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ElementBehaviour returns ElementBehaviour
	 *
	 * Constraint:
	 *     (name=EString description=EString? type=ElementBehaviourType? expression=EString?)
	 * </pre>
	 */
	protected void sequence_ElementBehaviour(ISerializationContext context, ElementBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EntityBehaviour returns EntityBehaviour
	 *
	 * Constraint:
	 *     (name=EString description=EString? type=EntityBehaviourType? expression=EString? attribute=MAttribute)
	 * </pre>
	 */
	protected void sequence_EntityBehaviour(ISerializationContext context, EntityBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnumerationValue returns EnumerationValue
	 *
	 * Constraint:
	 *     (name=EString description=EString? order=EInt?)
	 * </pre>
	 */
	protected void sequence_EnumerationValue(ISerializationContext context, EnumerationValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (name=EString description=EString? (values+=EnumerationValue values+=EnumerationValue*)?)
	 * </pre>
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Event
	 *     MType returns Event
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Form returns Form
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         label=EString? 
	 *         helpText=EString? 
	 *         type=ElementType? 
	 *         entity=[Entity|EString]? 
	 *         datasource=[DataSource|EString]? 
	 *         attributes=ElementAttribute? 
	 *         behaviours=ElementBehaviour? 
	 *         elements=InnerElement?
	 *     )
	 * </pre>
	 */
	protected void sequence_Form(ISerializationContext context, Form semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns GenericEntity
	 *     MType returns GenericEntity
	 *     GenericEntity returns GenericEntity
	 *
	 * Constraint:
	 *     (
	 *         isRoot?='isRoot'? 
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_GenericEntity(ISerializationContext context, GenericEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InnerElement returns InnerElement
	 *
	 * Constraint:
	 *     (
	 *         isHiden?='isHiden'? 
	 *         name=EString 
	 *         description=EString? 
	 *         label=EString? 
	 *         helpText=EString? 
	 *         type=ElementType? 
	 *         row=EInt? 
	 *         column=EInt? 
	 *         size=EInt? 
	 *         visibleFrom=ScreenSize? 
	 *         (attributes+=ElementAttribute attributes+=ElementAttribute*)? 
	 *         (behaviours+=ElementBehaviour behaviours+=ElementBehaviour*)? 
	 *         (elements+=InnerElement elements+=InnerElement*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_InnerElement(ISerializationContext context, InnerElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LanguageText returns LanguageText
	 *
	 * Constraint:
	 *     (name=EString value=EString?)
	 * </pre>
	 */
	protected void sequence_LanguageText(ISerializationContext context, LanguageText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Language returns Language
	 *
	 * Constraint:
	 *     (name=EString description=EString? culture=EString? (texts+=LanguageText texts+=LanguageText*)?)
	 * </pre>
	 */
	protected void sequence_Language(ISerializationContext context, Language semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     List returns List
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         label=EString? 
	 *         helpText=EString? 
	 *         type=ElementType? 
	 *         dataSource=EString? 
	 *         query=[Query|EString]? 
	 *         (attributes+=ElementAttribute attributes+=ElementAttribute*)? 
	 *         (behaviours+=ElementBehaviour behaviours+=ElementBehaviour*)? 
	 *         (elements+=InnerElement elements+=InnerElement*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MAttribute returns MAttribute
	 *
	 * Constraint:
	 *     (
	 *         isSystem?='isSystem'? 
	 *         isReadOnly?='isReadOnly'? 
	 *         isSensitiveData?='isSensitiveData'? 
	 *         name=EString 
	 *         description=EString? 
	 *         aggregationKind=MAggregationKind? 
	 *         type=[MType|EString]? 
	 *         dependsOnAttribute=[MAttribute|EString]? 
	 *         multiplicity=MMultiplicity
	 *     )
	 * </pre>
	 */
	protected void sequence_MAttribute(ISerializationContext context, MAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MBoolean
	 *     MBoolean returns MBoolean
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_MBoolean(ISerializationContext context, MBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.MBOOLEAN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.MBOOLEAN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMBooleanAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MDate
	 *     MDate returns MDate
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_MDate(ISerializationContext context, MDate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.MDATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.MDATE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMDateAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MDecimal
	 *     MDecimal returns MDecimal
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_MDecimal(ISerializationContext context, MDecimal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.MDECIMAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.MDECIMAL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMDecimalAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MEnumeration
	 *     MEnumeration returns MEnumeration
	 *
	 * Constraint:
	 *     (name=EString values=EString?)
	 * </pre>
	 */
	protected void sequence_MEnumeration(ISerializationContext context, MEnumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MInteger
	 *     MInteger returns MInteger
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_MInteger(ISerializationContext context, MInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.MINTEGER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.MINTEGER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMIntegerAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MMultiplicity returns MMultiplicity
	 *
	 * Constraint:
	 *     (lower=EInt? upper=EInt?)
	 * </pre>
	 */
	protected void sequence_MMultiplicity(ISerializationContext context, MMultiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MText
	 *     MText returns MText
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_MText(ISerializationContext context, MText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.MTEXT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.MTEXT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMTextAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MType returns MUuid
	 *     MUuid returns MUuid
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_MUuid(ISerializationContext context, MUuid semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MetamodelPackage.Literals.MUUID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MetamodelPackage.Literals.MUUID__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMUuidAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryFilter returns QueryFilter
	 *
	 * Constraint:
	 *     {QueryFilter}
	 * </pre>
	 */
	protected void sequence_QueryFilter(ISerializationContext context, QueryFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryJoinPredicate returns QueryJoinPredicate
	 *
	 * Constraint:
	 *     (innerPath=EString? outerPath=EString? outerDefinition=EString?)
	 * </pre>
	 */
	protected void sequence_QueryJoinPredicate(ISerializationContext context, QueryJoinPredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryJoin returns QueryJoin
	 *
	 * Constraint:
	 *     (name=EString joinType=QueryJoinType? table=QueryTable? Predicate=QueryJoinPredicate?)
	 * </pre>
	 */
	protected void sequence_QueryJoin(ISerializationContext context, QueryJoin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryOrderedProperty returns QueryOrderedProperty
	 *
	 * Constraint:
	 *     (path=EString? alias=EString? function=QueryFunction? direction=QuerySort?)
	 * </pre>
	 */
	protected void sequence_QueryOrderedProperty(ISerializationContext context, QueryOrderedProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryProperty returns QueryProperty
	 *
	 * Constraint:
	 *     (path=EString? alias=EString? function=QueryFunction?)
	 * </pre>
	 */
	protected void sequence_QueryProperty(ISerializationContext context, QueryProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryTable returns QueryTable
	 *
	 * Constraint:
	 *     (
	 *         definition=EString? 
	 *         alias=EString? 
	 *         (properties+=QueryProperty properties+=QueryProperty*)? 
	 *         (orderedProperties+=QueryOrderedProperty orderedProperties+=QueryOrderedProperty*)? 
	 *         filter=QueryFilter?
	 *     )
	 * </pre>
	 */
	protected void sequence_QueryTable(ISerializationContext context, QueryTable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Query returns Query
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         expression=EString? 
	 *         dataSource=[DataSource|EString]? 
	 *         table=QueryTable? 
	 *         joins=QueryJoin?
	 *     )
	 * </pre>
	 */
	protected void sequence_Query(ISerializationContext context, Query semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Resource
	 *     MType returns Resource
	 *     Resource returns Resource
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Resource(ISerializationContext context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         label=EString? 
	 *         helpText=EString? 
	 *         type=ElementType? 
	 *         (attributes+=ElementAttribute attributes+=ElementAttribute*)? 
	 *         (behaviours+=ElementBehaviour behaviours+=ElementBehaviour*)? 
	 *         (elements+=InnerElement elements+=InnerElement*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Serie
	 *     MType returns Serie
	 *     Serie returns Serie
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         dataSource=[DataSource|EString] 
	 *         (attributes+=MAttribute attributes+=MAttribute*)? 
	 *         (entityBehaviours+=EntityBehaviour entityBehaviours+=EntityBehaviour*)? 
	 *         (dataBehaviours+=DataBehaviour dataBehaviours+=DataBehaviour*)? 
	 *         (behaviourNamespaces+=BehaviourNamespace behaviourNamespaces+=BehaviourNamespace*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Serie(ISerializationContext context, Serie semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateBehaviour returns StateBehaviour
	 *
	 * Constraint:
	 *     (name=EString description=EString? type=StateBehaviourTypeEnum? expression=EString?)
	 * </pre>
	 */
	protected void sequence_StateBehaviour(ISerializationContext context, StateBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateDecision returns StateDecision
	 *
	 * Constraint:
	 *     (name=EString description=EString? order=EInt? commentType=StateDecisionCommentType?)
	 * </pre>
	 */
	protected void sequence_StateDecision(ISerializationContext context, StateDecision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateEnabledAttribute returns StateEnabledAttribute
	 *
	 * Constraint:
	 *     (name=EString description=EString? path=EString?)
	 * </pre>
	 */
	protected void sequence_StateEnabledAttribute(ISerializationContext context, StateEnabledAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateEnabledOperation returns StateEnabledOperation
	 *
	 * Constraint:
	 *     (name=EString description=EString? path=EString? type=StateEnabledOperationTypeEnum?)
	 * </pre>
	 */
	protected void sequence_StateEnabledOperation(ISerializationContext context, StateEnabledOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateMachine returns StateMachine
	 *
	 * Constraint:
	 *     (name=EString description=EString? definition=[Entity|EString] (states+=State states+=State*)?)
	 * </pre>
	 */
	protected void sequence_StateMachine(ISerializationContext context, StateMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateTransition returns StateTransition
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         order=EInt? 
	 *         type=StateTransitionType? 
	 *         expression=EString? 
	 *         to=[State|EString] 
	 *         decision=[StateDecision|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_StateTransition(ISerializationContext context, StateTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (
	 *         isInitial?='isInitial'? 
	 *         disableOperations?='disableOperations'? 
	 *         disableAttributes?='disableAttributes'? 
	 *         name=EString 
	 *         description=EString? 
	 *         assignToExpression=EString? 
	 *         (transitions+=StateTransition transitions+=StateTransition*)? 
	 *         (decisions+=StateDecision decisions+=StateDecision*)? 
	 *         (enableOperations+=StateEnabledOperation enableOperations+=StateEnabledOperation*)? 
	 *         enabledAttributes=StateEnabledAttribute? 
	 *         (behaviours+=StateBehaviour behaviours+=StateBehaviour*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextTemplate returns TextTemplate
	 *
	 * Constraint:
	 *     (name=EString description=EString? expression=EString?)
	 * </pre>
	 */
	protected void sequence_TextTemplate(ISerializationContext context, TextTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Theme returns Theme
	 *
	 * Constraint:
	 *     (name=EString description=EString? label=EString? helpText=EString? expression=EString?)
	 * </pre>
	 */
	protected void sequence_Theme(ISerializationContext context, Theme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WebComponent returns WebComponent
	 *
	 * Constraint:
	 *     (name=EString description=EString? customElementName=EString? expression=EString?)
	 * </pre>
	 */
	protected void sequence_WebComponent(ISerializationContext context, WebComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
