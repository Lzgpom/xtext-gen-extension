/**
 * generated by Xtext 2.27.0
 */
package org.omnia.metamodel.metamodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.omnia.metamodel.metamodel.MAggregationKind;
import org.omnia.metamodel.metamodel.MAttribute;
import org.omnia.metamodel.metamodel.MMultiplicity;
import org.omnia.metamodel.metamodel.MType;
import org.omnia.metamodel.metamodel.MetamodelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>MAttribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#isIsSystem <em>Is System</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#isIsReadOnly <em>Is Read Only</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#isIsSensitiveData <em>Is Sensitive Data</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#getAggregationKind <em>Aggregation Kind</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#getDependsOnAttribute <em>Depends On Attribute</em>}</li>
 *   <li>{@link org.omnia.metamodel.metamodel.impl.MAttributeImpl#getMultiplicity <em>Multiplicity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MAttributeImpl extends MinimalEObjectImpl.Container implements MAttribute
{
  /**
   * The default value of the '{@link #isIsSystem() <em>Is System</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsSystem()
   * @generated
   * @ordered
   */
  protected static final boolean IS_SYSTEM_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsSystem() <em>Is System</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsSystem()
   * @generated
   * @ordered
   */
  protected boolean isSystem = IS_SYSTEM_EDEFAULT;

  /**
   * The default value of the '{@link #isIsReadOnly() <em>Is Read Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsReadOnly()
   * @generated
   * @ordered
   */
  protected static final boolean IS_READ_ONLY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsReadOnly() <em>Is Read Only</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsReadOnly()
   * @generated
   * @ordered
   */
  protected boolean isReadOnly = IS_READ_ONLY_EDEFAULT;

  /**
   * The default value of the '{@link #isIsSensitiveData() <em>Is Sensitive Data</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsSensitiveData()
   * @generated
   * @ordered
   */
  protected static final boolean IS_SENSITIVE_DATA_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsSensitiveData() <em>Is Sensitive Data</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsSensitiveData()
   * @generated
   * @ordered
   */
  protected boolean isSensitiveData = IS_SENSITIVE_DATA_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getAggregationKind() <em>Aggregation Kind</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAggregationKind()
   * @generated
   * @ordered
   */
  protected static final MAggregationKind AGGREGATION_KIND_EDEFAULT = MAggregationKind.NONE;

  /**
   * The cached value of the '{@link #getAggregationKind() <em>Aggregation Kind</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAggregationKind()
   * @generated
   * @ordered
   */
  protected MAggregationKind aggregationKind = AGGREGATION_KIND_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected MType type;

  /**
   * The cached value of the '{@link #getDependsOnAttribute() <em>Depends On Attribute</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependsOnAttribute()
   * @generated
   * @ordered
   */
  protected MAttribute dependsOnAttribute;

  /**
   * The cached value of the '{@link #getMultiplicity() <em>Multiplicity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicity()
   * @generated
   * @ordered
   */
  protected MMultiplicity multiplicity;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MAttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MetamodelPackage.Literals.MATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsSystem()
  {
    return isSystem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsSystem(boolean newIsSystem)
  {
    boolean oldIsSystem = isSystem;
    isSystem = newIsSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__IS_SYSTEM, oldIsSystem, isSystem));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsReadOnly()
  {
    return isReadOnly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsReadOnly(boolean newIsReadOnly)
  {
    boolean oldIsReadOnly = isReadOnly;
    isReadOnly = newIsReadOnly;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__IS_READ_ONLY, oldIsReadOnly, isReadOnly));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsSensitiveData()
  {
    return isSensitiveData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsSensitiveData(boolean newIsSensitiveData)
  {
    boolean oldIsSensitiveData = isSensitiveData;
    isSensitiveData = newIsSensitiveData;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__IS_SENSITIVE_DATA, oldIsSensitiveData, isSensitiveData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MAggregationKind getAggregationKind()
  {
    return aggregationKind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAggregationKind(MAggregationKind newAggregationKind)
  {
    MAggregationKind oldAggregationKind = aggregationKind;
    aggregationKind = newAggregationKind == null ? AGGREGATION_KIND_EDEFAULT : newAggregationKind;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__AGGREGATION_KIND, oldAggregationKind, aggregationKind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MType getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (MType)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MetamodelPackage.MATTRIBUTE__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MType basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(MType newType)
  {
    MType oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MAttribute getDependsOnAttribute()
  {
    if (dependsOnAttribute != null && dependsOnAttribute.eIsProxy())
    {
      InternalEObject oldDependsOnAttribute = (InternalEObject)dependsOnAttribute;
      dependsOnAttribute = (MAttribute)eResolveProxy(oldDependsOnAttribute);
      if (dependsOnAttribute != oldDependsOnAttribute)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MetamodelPackage.MATTRIBUTE__DEPENDS_ON_ATTRIBUTE, oldDependsOnAttribute, dependsOnAttribute));
      }
    }
    return dependsOnAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MAttribute basicGetDependsOnAttribute()
  {
    return dependsOnAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDependsOnAttribute(MAttribute newDependsOnAttribute)
  {
    MAttribute oldDependsOnAttribute = dependsOnAttribute;
    dependsOnAttribute = newDependsOnAttribute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__DEPENDS_ON_ATTRIBUTE, oldDependsOnAttribute, dependsOnAttribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MMultiplicity getMultiplicity()
  {
    return multiplicity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplicity(MMultiplicity newMultiplicity, NotificationChain msgs)
  {
    MMultiplicity oldMultiplicity = multiplicity;
    multiplicity = newMultiplicity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__MULTIPLICITY, oldMultiplicity, newMultiplicity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiplicity(MMultiplicity newMultiplicity)
  {
    if (newMultiplicity != multiplicity)
    {
      NotificationChain msgs = null;
      if (multiplicity != null)
        msgs = ((InternalEObject)multiplicity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MetamodelPackage.MATTRIBUTE__MULTIPLICITY, null, msgs);
      if (newMultiplicity != null)
        msgs = ((InternalEObject)newMultiplicity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MetamodelPackage.MATTRIBUTE__MULTIPLICITY, null, msgs);
      msgs = basicSetMultiplicity(newMultiplicity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MetamodelPackage.MATTRIBUTE__MULTIPLICITY, newMultiplicity, newMultiplicity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MetamodelPackage.MATTRIBUTE__MULTIPLICITY:
        return basicSetMultiplicity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MetamodelPackage.MATTRIBUTE__IS_SYSTEM:
        return isIsSystem();
      case MetamodelPackage.MATTRIBUTE__IS_READ_ONLY:
        return isIsReadOnly();
      case MetamodelPackage.MATTRIBUTE__IS_SENSITIVE_DATA:
        return isIsSensitiveData();
      case MetamodelPackage.MATTRIBUTE__NAME:
        return getName();
      case MetamodelPackage.MATTRIBUTE__DESCRIPTION:
        return getDescription();
      case MetamodelPackage.MATTRIBUTE__AGGREGATION_KIND:
        return getAggregationKind();
      case MetamodelPackage.MATTRIBUTE__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case MetamodelPackage.MATTRIBUTE__DEPENDS_ON_ATTRIBUTE:
        if (resolve) return getDependsOnAttribute();
        return basicGetDependsOnAttribute();
      case MetamodelPackage.MATTRIBUTE__MULTIPLICITY:
        return getMultiplicity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MetamodelPackage.MATTRIBUTE__IS_SYSTEM:
        setIsSystem((Boolean)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__IS_READ_ONLY:
        setIsReadOnly((Boolean)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__IS_SENSITIVE_DATA:
        setIsSensitiveData((Boolean)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__NAME:
        setName((String)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__AGGREGATION_KIND:
        setAggregationKind((MAggregationKind)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__TYPE:
        setType((MType)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__DEPENDS_ON_ATTRIBUTE:
        setDependsOnAttribute((MAttribute)newValue);
        return;
      case MetamodelPackage.MATTRIBUTE__MULTIPLICITY:
        setMultiplicity((MMultiplicity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MetamodelPackage.MATTRIBUTE__IS_SYSTEM:
        setIsSystem(IS_SYSTEM_EDEFAULT);
        return;
      case MetamodelPackage.MATTRIBUTE__IS_READ_ONLY:
        setIsReadOnly(IS_READ_ONLY_EDEFAULT);
        return;
      case MetamodelPackage.MATTRIBUTE__IS_SENSITIVE_DATA:
        setIsSensitiveData(IS_SENSITIVE_DATA_EDEFAULT);
        return;
      case MetamodelPackage.MATTRIBUTE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MetamodelPackage.MATTRIBUTE__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case MetamodelPackage.MATTRIBUTE__AGGREGATION_KIND:
        setAggregationKind(AGGREGATION_KIND_EDEFAULT);
        return;
      case MetamodelPackage.MATTRIBUTE__TYPE:
        setType((MType)null);
        return;
      case MetamodelPackage.MATTRIBUTE__DEPENDS_ON_ATTRIBUTE:
        setDependsOnAttribute((MAttribute)null);
        return;
      case MetamodelPackage.MATTRIBUTE__MULTIPLICITY:
        setMultiplicity((MMultiplicity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MetamodelPackage.MATTRIBUTE__IS_SYSTEM:
        return isSystem != IS_SYSTEM_EDEFAULT;
      case MetamodelPackage.MATTRIBUTE__IS_READ_ONLY:
        return isReadOnly != IS_READ_ONLY_EDEFAULT;
      case MetamodelPackage.MATTRIBUTE__IS_SENSITIVE_DATA:
        return isSensitiveData != IS_SENSITIVE_DATA_EDEFAULT;
      case MetamodelPackage.MATTRIBUTE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MetamodelPackage.MATTRIBUTE__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case MetamodelPackage.MATTRIBUTE__AGGREGATION_KIND:
        return aggregationKind != AGGREGATION_KIND_EDEFAULT;
      case MetamodelPackage.MATTRIBUTE__TYPE:
        return type != null;
      case MetamodelPackage.MATTRIBUTE__DEPENDS_ON_ATTRIBUTE:
        return dependsOnAttribute != null;
      case MetamodelPackage.MATTRIBUTE__MULTIPLICITY:
        return multiplicity != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isSystem: ");
    result.append(isSystem);
    result.append(", isReadOnly: ");
    result.append(isReadOnly);
    result.append(", isSensitiveData: ");
    result.append(isSensitiveData);
    result.append(", name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(", aggregationKind: ");
    result.append(aggregationKind);
    result.append(')');
    return result.toString();
  }

} //MAttributeImpl
