/**
 * generated by Xtext 2.27.0
 */
package org.omnia.metamodel.metamodel.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.omnia.metamodel.metamodel.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.omnia.metamodel.metamodel.MetamodelPackage
 * @generated
 */
public class MetamodelAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MetamodelPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetamodelAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MetamodelPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MetamodelSwitch<Adapter> modelSwitch =
    new MetamodelSwitch<Adapter>()
    {
      @Override
      public Adapter caseApp(App object)
      {
        return createAppAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseMType(MType object)
      {
        return createMTypeAdapter();
      }
      @Override
      public Adapter caseAgent(Agent object)
      {
        return createAgentAdapter();
      }
      @Override
      public Adapter caseApplicationBehaviour(ApplicationBehaviour object)
      {
        return createApplicationBehaviourAdapter();
      }
      @Override
      public Adapter caseCommitement(Commitement object)
      {
        return createCommitementAdapter();
      }
      @Override
      public Adapter caseDashboard(Dashboard object)
      {
        return createDashboardAdapter();
      }
      @Override
      public Adapter caseDataSource(DataSource object)
      {
        return createDataSourceAdapter();
      }
      @Override
      public Adapter caseDocument(Document object)
      {
        return createDocumentAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseForm(Form object)
      {
        return createFormAdapter();
      }
      @Override
      public Adapter caseGenericEntity(GenericEntity object)
      {
        return createGenericEntityAdapter();
      }
      @Override
      public Adapter caseList(List object)
      {
        return createListAdapter();
      }
      @Override
      public Adapter caseQuery(Query object)
      {
        return createQueryAdapter();
      }
      @Override
      public Adapter caseResource(Resource object)
      {
        return createResourceAdapter();
      }
      @Override
      public Adapter caseSelector(Selector object)
      {
        return createSelectorAdapter();
      }
      @Override
      public Adapter caseSerie(Serie object)
      {
        return createSerieAdapter();
      }
      @Override
      public Adapter caseStateMachine(StateMachine object)
      {
        return createStateMachineAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseApplicationMenu(ApplicationMenu object)
      {
        return createApplicationMenuAdapter();
      }
      @Override
      public Adapter caseLanguage(Language object)
      {
        return createLanguageAdapter();
      }
      @Override
      public Adapter caseWebComponent(WebComponent object)
      {
        return createWebComponentAdapter();
      }
      @Override
      public Adapter caseTextTemplate(TextTemplate object)
      {
        return createTextTemplateAdapter();
      }
      @Override
      public Adapter caseTheme(Theme object)
      {
        return createThemeAdapter();
      }
      @Override
      public Adapter caseAuthorizationPolicy(AuthorizationPolicy object)
      {
        return createAuthorizationPolicyAdapter();
      }
      @Override
      public Adapter caseAuthorizationRole(AuthorizationRole object)
      {
        return createAuthorizationRoleAdapter();
      }
      @Override
      public Adapter caseMAttribute(MAttribute object)
      {
        return createMAttributeAdapter();
      }
      @Override
      public Adapter caseEntityBehaviour(EntityBehaviour object)
      {
        return createEntityBehaviourAdapter();
      }
      @Override
      public Adapter caseDataBehaviour(DataBehaviour object)
      {
        return createDataBehaviourAdapter();
      }
      @Override
      public Adapter caseBehaviourNamespace(BehaviourNamespace object)
      {
        return createBehaviourNamespaceAdapter();
      }
      @Override
      public Adapter caseMMultiplicity(MMultiplicity object)
      {
        return createMMultiplicityAdapter();
      }
      @Override
      public Adapter caseMEnumeration(MEnumeration object)
      {
        return createMEnumerationAdapter();
      }
      @Override
      public Adapter caseMBoolean(MBoolean object)
      {
        return createMBooleanAdapter();
      }
      @Override
      public Adapter caseMDate(MDate object)
      {
        return createMDateAdapter();
      }
      @Override
      public Adapter caseMDecimal(MDecimal object)
      {
        return createMDecimalAdapter();
      }
      @Override
      public Adapter caseMInteger(MInteger object)
      {
        return createMIntegerAdapter();
      }
      @Override
      public Adapter caseMText(MText object)
      {
        return createMTextAdapter();
      }
      @Override
      public Adapter caseMUuid(MUuid object)
      {
        return createMUuidAdapter();
      }
      @Override
      public Adapter caseElementAttribute(ElementAttribute object)
      {
        return createElementAttributeAdapter();
      }
      @Override
      public Adapter caseElementBehaviour(ElementBehaviour object)
      {
        return createElementBehaviourAdapter();
      }
      @Override
      public Adapter caseInnerElement(InnerElement object)
      {
        return createInnerElementAdapter();
      }
      @Override
      public Adapter caseBehaviourDependency(BehaviourDependency object)
      {
        return createBehaviourDependencyAdapter();
      }
      @Override
      public Adapter caseEnumerationValue(EnumerationValue object)
      {
        return createEnumerationValueAdapter();
      }
      @Override
      public Adapter caseQueryTable(QueryTable object)
      {
        return createQueryTableAdapter();
      }
      @Override
      public Adapter caseQueryJoin(QueryJoin object)
      {
        return createQueryJoinAdapter();
      }
      @Override
      public Adapter caseQueryProperty(QueryProperty object)
      {
        return createQueryPropertyAdapter();
      }
      @Override
      public Adapter caseQueryOrderedProperty(QueryOrderedProperty object)
      {
        return createQueryOrderedPropertyAdapter();
      }
      @Override
      public Adapter caseQueryFilter(QueryFilter object)
      {
        return createQueryFilterAdapter();
      }
      @Override
      public Adapter caseQueryJoinPredicate(QueryJoinPredicate object)
      {
        return createQueryJoinPredicateAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseStateTransition(StateTransition object)
      {
        return createStateTransitionAdapter();
      }
      @Override
      public Adapter caseStateDecision(StateDecision object)
      {
        return createStateDecisionAdapter();
      }
      @Override
      public Adapter caseStateEnabledOperation(StateEnabledOperation object)
      {
        return createStateEnabledOperationAdapter();
      }
      @Override
      public Adapter caseStateEnabledAttribute(StateEnabledAttribute object)
      {
        return createStateEnabledAttributeAdapter();
      }
      @Override
      public Adapter caseStateBehaviour(StateBehaviour object)
      {
        return createStateBehaviourAdapter();
      }
      @Override
      public Adapter caseLanguageText(LanguageText object)
      {
        return createLanguageTextAdapter();
      }
      @Override
      public Adapter caseAuthorizationPolicyPermission(AuthorizationPolicyPermission object)
      {
        return createAuthorizationPolicyPermissionAdapter();
      }
      @Override
      public Adapter caseAuthorizationRoleSubject(AuthorizationRoleSubject object)
      {
        return createAuthorizationRoleSubjectAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.App <em>App</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.App
   * @generated
   */
  public Adapter createAppAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MType <em>MType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MType
   * @generated
   */
  public Adapter createMTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Agent <em>Agent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Agent
   * @generated
   */
  public Adapter createAgentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.ApplicationBehaviour <em>Application Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.ApplicationBehaviour
   * @generated
   */
  public Adapter createApplicationBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Commitement <em>Commitement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Commitement
   * @generated
   */
  public Adapter createCommitementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Dashboard <em>Dashboard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Dashboard
   * @generated
   */
  public Adapter createDashboardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.DataSource <em>Data Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.DataSource
   * @generated
   */
  public Adapter createDataSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Document <em>Document</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Document
   * @generated
   */
  public Adapter createDocumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Form <em>Form</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Form
   * @generated
   */
  public Adapter createFormAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.GenericEntity <em>Generic Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.GenericEntity
   * @generated
   */
  public Adapter createGenericEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.List <em>List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.List
   * @generated
   */
  public Adapter createListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Query <em>Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Query
   * @generated
   */
  public Adapter createQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Resource <em>Resource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Resource
   * @generated
   */
  public Adapter createResourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Selector <em>Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Selector
   * @generated
   */
  public Adapter createSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Serie <em>Serie</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Serie
   * @generated
   */
  public Adapter createSerieAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.StateMachine <em>State Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.StateMachine
   * @generated
   */
  public Adapter createStateMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.ApplicationMenu <em>Application Menu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.ApplicationMenu
   * @generated
   */
  public Adapter createApplicationMenuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Language <em>Language</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Language
   * @generated
   */
  public Adapter createLanguageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.WebComponent <em>Web Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.WebComponent
   * @generated
   */
  public Adapter createWebComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.TextTemplate <em>Text Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.TextTemplate
   * @generated
   */
  public Adapter createTextTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.Theme <em>Theme</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.Theme
   * @generated
   */
  public Adapter createThemeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.AuthorizationPolicy <em>Authorization Policy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.AuthorizationPolicy
   * @generated
   */
  public Adapter createAuthorizationPolicyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.AuthorizationRole <em>Authorization Role</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.AuthorizationRole
   * @generated
   */
  public Adapter createAuthorizationRoleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MAttribute <em>MAttribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MAttribute
   * @generated
   */
  public Adapter createMAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.EntityBehaviour <em>Entity Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.EntityBehaviour
   * @generated
   */
  public Adapter createEntityBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.DataBehaviour <em>Data Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.DataBehaviour
   * @generated
   */
  public Adapter createDataBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.BehaviourNamespace <em>Behaviour Namespace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.BehaviourNamespace
   * @generated
   */
  public Adapter createBehaviourNamespaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MMultiplicity <em>MMultiplicity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MMultiplicity
   * @generated
   */
  public Adapter createMMultiplicityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MEnumeration <em>MEnumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MEnumeration
   * @generated
   */
  public Adapter createMEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MBoolean <em>MBoolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MBoolean
   * @generated
   */
  public Adapter createMBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MDate <em>MDate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MDate
   * @generated
   */
  public Adapter createMDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MDecimal <em>MDecimal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MDecimal
   * @generated
   */
  public Adapter createMDecimalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MInteger <em>MInteger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MInteger
   * @generated
   */
  public Adapter createMIntegerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MText <em>MText</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MText
   * @generated
   */
  public Adapter createMTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.MUuid <em>MUuid</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.MUuid
   * @generated
   */
  public Adapter createMUuidAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.ElementAttribute <em>Element Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.ElementAttribute
   * @generated
   */
  public Adapter createElementAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.ElementBehaviour <em>Element Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.ElementBehaviour
   * @generated
   */
  public Adapter createElementBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.InnerElement <em>Inner Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.InnerElement
   * @generated
   */
  public Adapter createInnerElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.BehaviourDependency <em>Behaviour Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.BehaviourDependency
   * @generated
   */
  public Adapter createBehaviourDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.EnumerationValue <em>Enumeration Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.EnumerationValue
   * @generated
   */
  public Adapter createEnumerationValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.QueryTable <em>Query Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.QueryTable
   * @generated
   */
  public Adapter createQueryTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.QueryJoin <em>Query Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.QueryJoin
   * @generated
   */
  public Adapter createQueryJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.QueryProperty <em>Query Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.QueryProperty
   * @generated
   */
  public Adapter createQueryPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.QueryOrderedProperty <em>Query Ordered Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.QueryOrderedProperty
   * @generated
   */
  public Adapter createQueryOrderedPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.QueryFilter <em>Query Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.QueryFilter
   * @generated
   */
  public Adapter createQueryFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.QueryJoinPredicate <em>Query Join Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.QueryJoinPredicate
   * @generated
   */
  public Adapter createQueryJoinPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.StateTransition <em>State Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.StateTransition
   * @generated
   */
  public Adapter createStateTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.StateDecision <em>State Decision</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.StateDecision
   * @generated
   */
  public Adapter createStateDecisionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.StateEnabledOperation <em>State Enabled Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.StateEnabledOperation
   * @generated
   */
  public Adapter createStateEnabledOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.StateEnabledAttribute <em>State Enabled Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.StateEnabledAttribute
   * @generated
   */
  public Adapter createStateEnabledAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.StateBehaviour <em>State Behaviour</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.StateBehaviour
   * @generated
   */
  public Adapter createStateBehaviourAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.LanguageText <em>Language Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.LanguageText
   * @generated
   */
  public Adapter createLanguageTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.AuthorizationPolicyPermission <em>Authorization Policy Permission</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.AuthorizationPolicyPermission
   * @generated
   */
  public Adapter createAuthorizationPolicyPermissionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.omnia.metamodel.metamodel.AuthorizationRoleSubject <em>Authorization Role Subject</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.omnia.metamodel.metamodel.AuthorizationRoleSubject
   * @generated
   */
  public Adapter createAuthorizationRoleSubjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MetamodelAdapterFactory
