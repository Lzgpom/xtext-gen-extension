// automatically generated by Xtext
grammar org.omnia.metamodel.Metamodel with org.eclipse.xtext.common.Terminals

generate metamodel "http://omnia.org/metamodel"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

App returns App:
	{App}
	'App'
	'{'
		('agents' '{' agents+=Agent ( "," agents+=Agent)* '}' )?
		('applicationBehaviours' '{' applicationBehaviours+=ApplicationBehaviour ( "," applicationBehaviours+=ApplicationBehaviour)* '}' )?
		('commitements' '{' commitements+=Commitement ( "," commitements+=Commitement)* '}' )?
		('dashboards' '{' dashboards+=Dashboard ( "," dashboards+=Dashboard)* '}' )?
		('datasources' '{' datasources+=DataSource ( "," datasources+=DataSource)* '}' )?
		('documents' '{' documents+=Document ( "," documents+=Document)* '}' )?
		('enumerations' '{' enumerations+=Enumeration ( "," enumerations+=Enumeration)* '}' )?
		('forms' '{' forms+=Form ( "," forms+=Form)* '}' )?
		('genericEntities' '{' genericEntities+=GenericEntity ( "," genericEntities+=GenericEntity)* '}' )?
		('lists' '{' lists+=List ( "," lists+=List)* '}' )?
		('queries' '{' queries+=Query ( "," queries+=Query)* '}' )?
		('resources' '{' resources+=Resource ( "," resources+=Resource)* '}' )?
		('selectors' '{' selectors+=Selector ( "," selectors+=Selector)* '}' )?
		('series' '{' series+=Serie ( "," series+=Serie)* '}' )?
		('stateMachines' '{' stateMachines+=StateMachine ( "," stateMachines+=StateMachine)* '}' )?
		('events' '{' events+=Event ( "," events+=Event)* '}' )?
		('applicationMenus' '{' applicationMenus+=ApplicationMenu ( "," applicationMenus+=ApplicationMenu)* '}' )?
		('languages' '{' languages+=Language ( "," languages+=Language)* '}' )?
		('webComponents' '{' webComponents+=WebComponent ( "," webComponents+=WebComponent)* '}' )?
		('textTemplates' '{' textTemplates+=TextTemplate ( "," textTemplates+=TextTemplate)* '}' )?
		('themes' '{' themes+=Theme ( "," themes+=Theme)* '}' )?
		('authorizationPolicies' '{' authorizationPolicies+=AuthorizationPolicy ( "," authorizationPolicies+=AuthorizationPolicy)* '}' )?
		('authorizationRoles' '{' authorizationRoles+=AuthorizationRole ( "," authorizationRoles+=AuthorizationRole)* '}' )?
	'}';

































Entity returns Entity:
	Agent | Resource | GenericEntity | Document | Event | Commitement | Serie;







MType returns MType:
	MEnumeration | MBoolean | MDate | MDecimal | MInteger | MText | MUuid | Agent | Resource | GenericEntity | Document | Event | Commitement | DataSource | Serie;











Agent returns Agent:
	'Agent'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

ApplicationBehaviour returns ApplicationBehaviour:
	{ApplicationBehaviour}
	'ApplicationBehaviour'
	name=EString
	'{'
		('description' description=EString)?
		('expression' expression=EString)?
		('executionLocation' executionLocation=ExecutionLocation)?
		('dataSource' dataSource=[DataSource|EString])?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

Commitement returns Commitement:
	'Commitement'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

Dashboard returns Dashboard:
	{Dashboard}
	'Dashboard'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('type' type=ElementType)?
		('attributes' '{' attributes+=ElementAttribute ( "," attributes+=ElementAttribute)* '}' )?
		('behaviours' '{' behaviours+=ElementBehaviour ( "," behaviours+=ElementBehaviour)* '}' )?
		('elements' elements=InnerElement)?
	'}';

DataSource returns DataSource:
	{DataSource}
	(executesInConnector?='executesInConnector')?
	'DataSource'
	name=EString
	'{'
		('description' description=EString)?
		('behaviourRuntime' behaviourRuntime=RuntimeLocation)?
		('dataAccessRuntime' dataAccessRuntime=RuntimeLocation)?
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
		('behaviourDependencies' '{' behaviourDependencies+=BehaviourDependency ( "," behaviourDependencies+=BehaviourDependency)* '}' )?
	'}';

Document returns Document:
	'Document'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

Enumeration returns Enumeration:
	{Enumeration}
	'Enumeration'
	name=EString
	'{'
		('description' description=EString)?
		('values' '{' values+=EnumerationValue ( "," values+=EnumerationValue)* '}' )?
	'}';

Form returns Form:
	{Form}
	'Form'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('type' type=ElementType)?
		('entity' entity=[Entity|EString])?
		('datasource' datasource=[DataSource|EString])?
		('attributes' attributes=ElementAttribute)?
		('behaviours' behaviours=ElementBehaviour)?
		('elements' elements=InnerElement)?
	'}';

GenericEntity returns GenericEntity:
	(isRoot?='isRoot')?
	'GenericEntity'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

List returns List:
	{List}
	'List'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('type' type=ElementType)?
		('dataSource' dataSource=EString)?
		('query' query=[Query|EString])?
		('attributes' '{' attributes+=ElementAttribute ( "," attributes+=ElementAttribute)* '}' )?
		('behaviours' '{' behaviours+=ElementBehaviour ( "," behaviours+=ElementBehaviour)* '}' )?
		('elements' '{' elements+=InnerElement ( "," elements+=InnerElement)* '}' )?
	'}';

Query returns Query:
	{Query}
	'Query'
	name=EString
	'{'
		('description' description=EString)?
		('expression' expression=EString)?
		('dataSource' dataSource=[DataSource|EString])?
		('table' table=QueryTable)?
		('joins' joins=QueryJoin)?
	'}';

Resource returns Resource:
	'Resource'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

Selector returns Selector:
	{Selector}
	'Selector'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('type' type=ElementType)?
		('attributes' '{' attributes+=ElementAttribute ( "," attributes+=ElementAttribute)* '}' )?
		('behaviours' '{' behaviours+=ElementBehaviour ( "," behaviours+=ElementBehaviour)* '}' )?
		('elements' '{' elements+=InnerElement ( "," elements+=InnerElement)* '}' )?
	'}';

Serie returns Serie:
	'Serie'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

StateMachine returns StateMachine:
	'StateMachine'
	name=EString
	'{'
		('description' description=EString)?
		'definition' definition=[Entity|EString]
		('states' '{' states+=State ( "," states+=State)* '}' )?
	'}';

Event returns Event:
	'Event'
	name=EString
	'{'
		('description' description=EString)?
		'dataSource' dataSource=[DataSource|EString]
		('attributes' '{' attributes+=MAttribute ( "," attributes+=MAttribute)* '}' )?
		('entityBehaviours' '{' entityBehaviours+=EntityBehaviour ( "," entityBehaviours+=EntityBehaviour)* '}' )?
		('dataBehaviours' '{' dataBehaviours+=DataBehaviour ( "," dataBehaviours+=DataBehaviour)* '}' )?
		('behaviourNamespaces' '{' behaviourNamespaces+=BehaviourNamespace ( "," behaviourNamespaces+=BehaviourNamespace)* '}' )?
	'}';

ApplicationMenu returns ApplicationMenu:
	{ApplicationMenu}
	'ApplicationMenu'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('type' type=ElementType)?
		('attributes' '{' attributes+=ElementAttribute ( "," attributes+=ElementAttribute)* '}' )?
		('behaviours' '{' behaviours+=ElementBehaviour ( "," behaviours+=ElementBehaviour)* '}' )?
		('elements' '{' elements+=InnerElement ( "," elements+=InnerElement)* '}' )?
	'}';

Language returns Language:
	{Language}
	'Language'
	name=EString
	'{'
		('description' description=EString)?
		('culture' culture=EString)?
		('texts' '{' texts+=LanguageText ( "," texts+=LanguageText)* '}' )?
	'}';

WebComponent returns WebComponent:
	{WebComponent}
	'WebComponent'
	name=EString
	'{'
		('description' description=EString)?
		('customElementName' customElementName=EString)?
		('expression' expression=EString)?
	'}';

TextTemplate returns TextTemplate:
	{TextTemplate}
	'TextTemplate'
	name=EString
	'{'
		('description' description=EString)?
		('expression' expression=EString)?
	'}';

Theme returns Theme:
	{Theme}
	'Theme'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('expression' expression=EString)?
	'}';

AuthorizationPolicy returns AuthorizationPolicy:
	{AuthorizationPolicy}
	'AuthorizationPolicy'
	name=EString
	'{'
		('description' description=EString)?
		('permissions' '{' permissions+=AuthorizationPolicyPermission ( "," permissions+=AuthorizationPolicyPermission)* '}' )?
		('policies' '{' policies+=AuthorizationPolicy ( "," policies+=AuthorizationPolicy)* '}' )?
	'}';

AuthorizationRole returns AuthorizationRole:
	{AuthorizationRole}
	'AuthorizationRole'
	name=EString
	'{'
		('description' description=EString)?
		('subjects' '{' subjects+=AuthorizationRoleSubject ( "," subjects+=AuthorizationRoleSubject)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

MAttribute returns MAttribute:
	(isSystem?='isSystem')?
	(isReadOnly?='isReadOnly')?
	(isSensitiveData?='isSensitiveData')?
	'MAttribute'
	name=EString
	'{'
		('description' description=EString)?
		('aggregationKind' aggregationKind=MAggregationKind)?
		('type' type=[MType|EString])?
		('dependsOnAttribute' dependsOnAttribute=[MAttribute|EString])?
		'multiplicity' multiplicity=MMultiplicity
	'}';

EntityBehaviour returns EntityBehaviour:
	'EntityBehaviour'
	name=EString
	'{'
		('description' description=EString)?
		('type' type=EntityBehaviourType)?
		('expression' expression=EString)?
		'attribute' attribute=MAttribute
	'}';

DataBehaviour returns DataBehaviour:
	{DataBehaviour}
	'DataBehaviour'
	name=EString
	'{'
		('description' description=EString)?
		('type' type=DataBehaviourType)?
		('expression' expression=EString)?
	'}';

BehaviourNamespace returns BehaviourNamespace:
	{BehaviourNamespace}
	'BehaviourNamespace'
	name=EString
	'{'
		('description' description=EString)?
		('fullyQualifiedName' fullyQualifiedName=EString)?
		('executionLocation' executionLocation=ExecutionLocation)?
	'}';

MMultiplicity returns MMultiplicity:
	{MMultiplicity}
	'MMultiplicity'
	'{'
		('lower' lower=EInt)?
		('upper' upper=EInt)?
	'}';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

enum MAggregationKind returns MAggregationKind:
				NONE = 'NONE' | COMPOSITE = 'COMPOSITE' | SHARED = 'SHARED';

MEnumeration returns MEnumeration:
	{MEnumeration}
	'MEnumeration'
	name=EString
	'{'
		('values' values=EString)?
	'}';

MBoolean returns MBoolean:
	{MBoolean}
	'MBoolean'
	name=EString;

MDate returns MDate:
	{MDate}
	'MDate'
	name=EString;

MDecimal returns MDecimal:
	{MDecimal}
	'MDecimal'
	name=EString;

MInteger returns MInteger:
	{MInteger}
	'MInteger'
	name=EString;

MText returns MText:
	{MText}
	'MText'
	name=EString;

MUuid returns MUuid:
	{MUuid}
	'MUuid'
	name=EString;

EInt returns ecore::EInt:
	'-'? INT;

enum EntityBehaviourType returns EntityBehaviourType:
				Action = 'Action' | AfterChange = 'AfterChange' | BeforeChange = 'BeforeChange' | Formula = 'Formula' | BeforeSave = 'BeforeSave' | AfterSave = 'AfterSave' | Initialize = 'Initialize' | BeforeCollectionEntityInitialize = 'BeforeCollectionEntityInitialize';

enum DataBehaviourType returns DataBehaviourType:
				Create = 'Create' | Delete = 'Delete' | Read = 'Read' | ReadList = 'ReadList' | Update = 'Update';

enum ExecutionLocation returns ExecutionLocation:
				External = 'External' | Internal = 'Internal';

enum ElementType returns ElementType:
				Input = 'Input' | List = 'List' | ListColumn = 'ListColumn' | GroupContainer = 'GroupContainer' | Group = 'Group' | ReferenceSelector = 'ReferenceSelector' | Dashboard = 'Dashboard' | Form = 'Form' | WebComponent = 'WebComponent' | Menu = 'Menu' | MenuEntry = 'MenuEntry' | Container = 'Container' | Calendar = 'Calendar' | Selector = 'Selector' | SelectorEntry = 'SelectorEntry' | Button = 'Button' | ButtonGroup = 'ButtonGroup' | Label = 'Label' | Divider = 'Divider' | Panel = 'Panel';

ElementAttribute returns ElementAttribute:
	{ElementAttribute}
	'ElementAttribute'
	'{'
		('key' key=EString)?
		('value' value=EString)?
	'}';

ElementBehaviour returns ElementBehaviour:
	{ElementBehaviour}
	'ElementBehaviour'
	name=EString
	'{'
		('description' description=EString)?
		('type' type=ElementBehaviourType)?
		('expression' expression=EString)?
	'}';

InnerElement returns InnerElement:
	{InnerElement}
	(isHiden?='isHiden')?
	'InnerElement'
	name=EString
	'{'
		('description' description=EString)?
		('label' label=EString)?
		('helpText' helpText=EString)?
		('type' type=ElementType)?
		('row' row=EInt)?
		('column' column=EInt)?
		('size' size=EInt)?
		('visibleFrom' visibleFrom=ScreenSize)?
		('attributes' '{' attributes+=ElementAttribute ( "," attributes+=ElementAttribute)* '}' )?
		('behaviours' '{' behaviours+=ElementBehaviour ( "," behaviours+=ElementBehaviour)* '}' )?
		('elements' '{' elements+=InnerElement ( "," elements+=InnerElement)* '}' )?
	'}';

enum ElementBehaviourType returns ElementBehaviourType:
				Initialize = 'Initialize' | BeforeChange = 'BeforeChange' | Change = 'Change' | AfterChange = 'AfterChange' | BeforeSave = 'BeforeSave' | Select = 'Select' | BeforeCollectionEntityInitialize = 'BeforeCollectionEntityInitialize' | OnClick = 'OnClick';

enum ScreenSize returns ScreenSize:
				Mobile = 'Mobile' | Tablet = 'Tablet' | Desktop = 'Desktop' | Widescreen = 'Widescreen';

enum RuntimeLocation returns RuntimeLocation:
				External = 'External' | Internal = 'Internal';

BehaviourDependency returns BehaviourDependency:
	{BehaviourDependency}
	'BehaviourDependency'
	name=EString
	'{'
		('description' description=EString)?
		('type' type=BehaviourDependencyType)?
		('version' version=EInt)?
		('executionLocation' executionLocation=ExecutionLocation)?
		('path' path=EString)?
		('assemblyName' assemblyName=EString)?
		('expression' expression=EString)?
	'}';

enum BehaviourDependencyType returns BehaviourDependencyType:
				File = 'File' | Nuget = 'Nuget' | Expression = 'Expression';

EnumerationValue returns EnumerationValue:
	{EnumerationValue}
	'EnumerationValue'
	name=EString
	'{'
		('description' description=EString)?
		('order' order=EInt)?
	'}';

QueryTable returns QueryTable:
	{QueryTable}
	'QueryTable'
	'{'
		('definition' definition=EString)?
		('alias' alias=EString)?
		('properties' '{' properties+=QueryProperty ( "," properties+=QueryProperty)* '}' )?
		('orderedProperties' '{' orderedProperties+=QueryOrderedProperty ( "," orderedProperties+=QueryOrderedProperty)* '}' )?
		('filter' filter=QueryFilter)?
	'}';

QueryJoin returns QueryJoin:
	{QueryJoin}
	'QueryJoin'
	name=EString
	'{'
		('joinType' joinType=QueryJoinType)?
		('table' table=QueryTable)?
		('Predicate' Predicate=QueryJoinPredicate)?
	'}';

QueryProperty returns QueryProperty:
	{QueryProperty}
	'QueryProperty'
	'{'
		('path' path=EString)?
		('alias' alias=EString)?
		('function' function=QueryFunction)?
	'}';

QueryOrderedProperty returns QueryOrderedProperty:
	{QueryOrderedProperty}
	'QueryOrderedProperty'
	'{'
		('path' path=EString)?
		('alias' alias=EString)?
		('function' function=QueryFunction)?
		('direction' direction=QuerySort)?
	'}';

QueryFilter returns QueryFilter:
	{QueryFilter}
	'QueryFilter'
	;

enum QueryFunction returns QueryFunction:
				None = 'None' | Min = 'Min' | Max = 'Max' | Count = 'Count' | Average = 'Average' | Sum = 'Sum' | Year = 'Year' | Month = 'Month' | Day = 'Day';

enum QuerySort returns QuerySort:
				Ascend = 'Ascend' | Descend = 'Descend';

enum QueryJoinType returns QueryJoinType:
				Inner = 'Inner' | Left = 'Left' | Right = 'Right' | Full = 'Full' | Cross = 'Cross';

QueryJoinPredicate returns QueryJoinPredicate:
	{QueryJoinPredicate}
	'QueryJoinPredicate'
	'{'
		('innerPath' innerPath=EString)?
		('outerPath' outerPath=EString)?
		('outerDefinition' outerDefinition=EString)?
	'}';

State returns State:
	{State}
	(isInitial?='isInitial')?
	(disableOperations?='disableOperations')?
	(disableAttributes?='disableAttributes')?
	'State'
	name=EString
	'{'
		('description' description=EString)?
		('assignToExpression' assignToExpression=EString)?
		('transitions' '{' transitions+=StateTransition ( "," transitions+=StateTransition)* '}' )?
		('decisions' '{' decisions+=StateDecision ( "," decisions+=StateDecision)* '}' )?
		('enableOperations' '{' enableOperations+=StateEnabledOperation ( "," enableOperations+=StateEnabledOperation)* '}' )?
		('enabledAttributes' enabledAttributes=StateEnabledAttribute)?
		('behaviours' '{' behaviours+=StateBehaviour ( "," behaviours+=StateBehaviour)* '}' )?
	'}';

StateTransition returns StateTransition:
	'StateTransition'
	name=EString
	'{'
		('description' description=EString)?
		('order' order=EInt)?
		('type' type=StateTransitionType)?
		('expression' expression=EString)?
		'to' to=[State|EString]
		('decision' decision=[StateDecision|EString])?
	'}';

StateDecision returns StateDecision:
	{StateDecision}
	'StateDecision'
	name=EString
	'{'
		('description' description=EString)?
		('order' order=EInt)?
		('commentType' commentType=StateDecisionCommentType)?
	'}';

StateEnabledOperation returns StateEnabledOperation:
	{StateEnabledOperation}
	'StateEnabledOperation'
	name=EString
	'{'
		('description' description=EString)?
		('path' path=EString)?
		('type' type=StateEnabledOperationTypeEnum)?
	'}';

StateEnabledAttribute returns StateEnabledAttribute:
	{StateEnabledAttribute}
	'StateEnabledAttribute'
	name=EString
	'{'
		('description' description=EString)?
		('path' path=EString)?
	'}';

StateBehaviour returns StateBehaviour:
	{StateBehaviour}
	'StateBehaviour'
	name=EString
	'{'
		('description' description=EString)?
		('type' type=StateBehaviourTypeEnum)?
		('expression' expression=EString)?
	'}';

enum StateTransitionType returns StateTransitionType:
				Auto = 'Auto' | Decision = 'Decision';

enum StateDecisionCommentType returns StateDecisionCommentType:
				None = 'None' | Optional = 'Optional' | Required = 'Required';

enum StateEnabledOperationTypeEnum returns StateEnabledOperationTypeEnum:
				Add = 'Add' | Update = 'Update' | Delete = 'Delete';

enum StateBehaviourTypeEnum returns StateBehaviourTypeEnum:
				In = 'In' | Out = 'Out';

LanguageText returns LanguageText:
	{LanguageText}
	'LanguageText'
	name=EString
	'{'
		('value' value=EString)?
	'}';

AuthorizationPolicyPermission returns AuthorizationPolicyPermission:
	{AuthorizationPolicyPermission}
	'AuthorizationPolicyPermission'
	name=EString
	'{'
		('description' description=EString)?
		('roles' '(' roles+=[AuthorizationRole|EString] ( "," roles+=[AuthorizationRole|EString])* ')' )?
	'}';

AuthorizationRoleSubject returns AuthorizationRoleSubject:
	{AuthorizationRoleSubject}
	'AuthorizationRoleSubject'
	'{'
		('Id' Id=EString)?
		('username' username=EString)?
	'}';
