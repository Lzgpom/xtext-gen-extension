/**
 * generated by Xtext 2.27.0
 */
package org.omnia.metamodel.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.omnia.metamodel.metamodel.Agent;
import org.omnia.metamodel.metamodel.App;
import org.omnia.metamodel.metamodel.ApplicationBehaviour;
import org.omnia.metamodel.metamodel.ApplicationMenu;
import org.omnia.metamodel.metamodel.AuthorizationPolicy;
import org.omnia.metamodel.metamodel.AuthorizationRole;
import org.omnia.metamodel.metamodel.BehaviourNamespace;
import org.omnia.metamodel.metamodel.Commitement;
import org.omnia.metamodel.metamodel.Dashboard;
import org.omnia.metamodel.metamodel.DataBehaviour;
import org.omnia.metamodel.metamodel.DataSource;
import org.omnia.metamodel.metamodel.Document;
import org.omnia.metamodel.metamodel.EntityBehaviour;
import org.omnia.metamodel.metamodel.Enumeration;
import org.omnia.metamodel.metamodel.Event;
import org.omnia.metamodel.metamodel.Form;
import org.omnia.metamodel.metamodel.GenericEntity;
import org.omnia.metamodel.metamodel.Language;
import org.omnia.metamodel.metamodel.List;
import org.omnia.metamodel.metamodel.MAttribute;
import org.omnia.metamodel.metamodel.Query;
import org.omnia.metamodel.metamodel.Resource;
import org.omnia.metamodel.metamodel.Selector;
import org.omnia.metamodel.metamodel.Serie;
import org.omnia.metamodel.metamodel.StateMachine;
import org.omnia.metamodel.metamodel.TextTemplate;
import org.omnia.metamodel.metamodel.Theme;
import org.omnia.metamodel.metamodel.WebComponent;
import org.omnia.metamodel.services.MetamodelGrammarAccess;

@SuppressWarnings("all")
public class MetamodelFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MetamodelGrammarAccess _metamodelGrammarAccess;

  protected void _format(final App app, @Extension final IFormattableDocument document) {
    EList<Agent> _agents = app.getAgents();
    for (final Agent agent : _agents) {
      document.<Agent>format(agent);
    }
    EList<ApplicationBehaviour> _applicationBehaviours = app.getApplicationBehaviours();
    for (final ApplicationBehaviour applicationBehaviour : _applicationBehaviours) {
      document.<ApplicationBehaviour>format(applicationBehaviour);
    }
    EList<Commitement> _commitements = app.getCommitements();
    for (final Commitement commitement : _commitements) {
      document.<Commitement>format(commitement);
    }
    EList<Dashboard> _dashboards = app.getDashboards();
    for (final Dashboard dashboard : _dashboards) {
      document.<Dashboard>format(dashboard);
    }
    EList<DataSource> _datasources = app.getDatasources();
    for (final DataSource dataSource : _datasources) {
      document.<DataSource>format(dataSource);
    }
    EList<Document> _documents = app.getDocuments();
    for (final Document _document : _documents) {
      document.<Document>format(_document);
    }
    EList<Enumeration> _enumerations = app.getEnumerations();
    for (final Enumeration enumeration : _enumerations) {
      document.<Enumeration>format(enumeration);
    }
    EList<Form> _forms = app.getForms();
    for (final Form form : _forms) {
      document.<Form>format(form);
    }
    EList<GenericEntity> _genericEntities = app.getGenericEntities();
    for (final GenericEntity genericEntity : _genericEntities) {
      document.<GenericEntity>format(genericEntity);
    }
    EList<List> _lists = app.getLists();
    for (final List list : _lists) {
      document.<List>format(list);
    }
    EList<Query> _queries = app.getQueries();
    for (final Query query : _queries) {
      document.<Query>format(query);
    }
    EList<Resource> _resources = app.getResources();
    for (final Resource resource : _resources) {
      document.<Resource>format(resource);
    }
    EList<Selector> _selectors = app.getSelectors();
    for (final Selector selector : _selectors) {
      document.<Selector>format(selector);
    }
    EList<Serie> _series = app.getSeries();
    for (final Serie serie : _series) {
      document.<Serie>format(serie);
    }
    EList<StateMachine> _stateMachines = app.getStateMachines();
    for (final StateMachine stateMachine : _stateMachines) {
      document.<StateMachine>format(stateMachine);
    }
    EList<Event> _events = app.getEvents();
    for (final Event event : _events) {
      document.<Event>format(event);
    }
    EList<ApplicationMenu> _applicationMenus = app.getApplicationMenus();
    for (final ApplicationMenu applicationMenu : _applicationMenus) {
      document.<ApplicationMenu>format(applicationMenu);
    }
    EList<Language> _languages = app.getLanguages();
    for (final Language language : _languages) {
      document.<Language>format(language);
    }
    EList<WebComponent> _webComponents = app.getWebComponents();
    for (final WebComponent webComponent : _webComponents) {
      document.<WebComponent>format(webComponent);
    }
    EList<TextTemplate> _textTemplates = app.getTextTemplates();
    for (final TextTemplate textTemplate : _textTemplates) {
      document.<TextTemplate>format(textTemplate);
    }
    EList<Theme> _themes = app.getThemes();
    for (final Theme theme : _themes) {
      document.<Theme>format(theme);
    }
    EList<AuthorizationPolicy> _authorizationPolicies = app.getAuthorizationPolicies();
    for (final AuthorizationPolicy authorizationPolicy : _authorizationPolicies) {
      document.<AuthorizationPolicy>format(authorizationPolicy);
    }
    EList<AuthorizationRole> _authorizationRoles = app.getAuthorizationRoles();
    for (final AuthorizationRole authorizationRole : _authorizationRoles) {
      document.<AuthorizationRole>format(authorizationRole);
    }
  }

  protected void _format(final Agent agent, @Extension final IFormattableDocument document) {
    EList<MAttribute> _attributes = agent.getAttributes();
    for (final MAttribute mAttribute : _attributes) {
      document.<MAttribute>format(mAttribute);
    }
    EList<EntityBehaviour> _entityBehaviours = agent.getEntityBehaviours();
    for (final EntityBehaviour entityBehaviour : _entityBehaviours) {
      document.<EntityBehaviour>format(entityBehaviour);
    }
    EList<DataBehaviour> _dataBehaviours = agent.getDataBehaviours();
    for (final DataBehaviour dataBehaviour : _dataBehaviours) {
      document.<DataBehaviour>format(dataBehaviour);
    }
    EList<BehaviourNamespace> _behaviourNamespaces = agent.getBehaviourNamespaces();
    for (final BehaviourNamespace behaviourNamespace : _behaviourNamespaces) {
      document.<BehaviourNamespace>format(behaviourNamespace);
    }
  }

  public void format(final Object agent, final IFormattableDocument document) {
    if (agent instanceof XtextResource) {
      _format((XtextResource)agent, document);
      return;
    } else if (agent instanceof Agent) {
      _format((Agent)agent, document);
      return;
    } else if (agent instanceof App) {
      _format((App)agent, document);
      return;
    } else if (agent instanceof EObject) {
      _format((EObject)agent, document);
      return;
    } else if (agent == null) {
      _format((Void)null, document);
      return;
    } else if (agent != null) {
      _format(agent, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(agent, document).toString());
    }
  }
}
