/**
 * generated by Xtext 2.27.0
 */
package org.eclipse.xtext.example.fowlerdsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.example.fowlerdsl.services.StatemachineGrammarAccess;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Command;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Event;
import org.eclipse.xtext.example.fowlerdsl.statemachine.State;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Statemachine;
import org.eclipse.xtext.example.fowlerdsl.statemachine.Transition;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class StatemachineFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private StatemachineGrammarAccess _statemachineGrammarAccess;

  protected void _format(final Statemachine statemachine, @Extension final IFormattableDocument document) {
    EList<Event> _events = statemachine.getEvents();
    for (final Event event : _events) {
      document.<Event>format(event);
    }
    EList<Command> _commands = statemachine.getCommands();
    for (final Command command : _commands) {
      document.<Command>format(command);
    }
    EList<State> _states = statemachine.getStates();
    for (final State state : _states) {
      document.<State>format(state);
    }
  }

  protected void _format(final State state, @Extension final IFormattableDocument document) {
    EList<Transition> _transitions = state.getTransitions();
    for (final Transition transition : _transitions) {
      document.<Transition>format(transition);
    }
  }

  public void format(final Object state, final IFormattableDocument document) {
    if (state instanceof XtextResource) {
      _format((XtextResource)state, document);
      return;
    } else if (state instanceof State) {
      _format((State)state, document);
      return;
    } else if (state instanceof Statemachine) {
      _format((Statemachine)state, document);
      return;
    } else if (state instanceof EObject) {
      _format((EObject)state, document);
      return;
    } else if (state == null) {
      _format((Void)null, document);
      return;
    } else if (state != null) {
      _format(state, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(state, document).toString());
    }
  }
}
